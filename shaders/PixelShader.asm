
//listing of all techniques and passes with embedded asm listings 

technique Technique1
{
    pass Default
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
    pass ColorOnly
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0.w, v0
                mov oC0, r0
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
    pass ArmorMartian
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c0, 0, 2, 3, 0.5
                def c1, 1, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r1.w, r0.y, r0.x
                add r1.x, r0.z, r1.w
                max r1.y, r0.y, r0.z
                max r2.w, r0.x, r1.y
                mul r0.w, r0.w, v0.w
                add r1.x, r1.x, -r2.w
                mad r1.y, r1.x, -c0.w, r2.w
                mul r1.x, r1.x, c0.w
                mul r2.xyz, r0.w, c0
                mad r2.xyz, r1.y, r2, r1.x
                add r2.w, -r1.y, c1.x
                add r1.xyz, -v0, c1.x
                mad r1.xyz, r1, -r2.w, c1.x
                mul r0.xyz, r2, r1
                mov oC0, r0
            
            // approximately 16 instruction slots used (1 texture, 15 arithmetic)
            };
    }
    pass ArmorColored
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uSaturation  c1       1
            //
            
                preshader
                neg r0.xyz, c0.xyz
                add c0.xyz, (1, 1, 1), r0.xyz
                neg r0.x, c1.x
                add r1.x, r0.x, (1)
                rcp r0.x, c1.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c1.x, r2.x
                add c2.x, r0.x, (1)
            
            // approximately 9 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c3       1
            //   uSaturation  c4       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c5, 0.5, 1.5, 1, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r0.x, r2.w, r2.x
                add r0.y, r2.w, -r2.x
                mul r0.y, r0.y, c4.x
                mov r1.x, c1.x
                mad r0.y, r0.y, r1.x, c2.x
                mad r0.z, r0.x, -c5.x, c5.y
                mov r1.z, c5.z
                mad r1.xyz, r0.z, -c0, r1.z
                mad r1.w, r0.x, -c5.x, c5.x
                mul r2.xyz, r0.x, c3
                cmp r1.xyz, r1.w, r2, r1
                mad r1.xyz, r0.x, -c5.x, r1
                mul r1.w, r0.x, c5.x
                mad r1.xyz, r0.y, r1, r1.w
                mov r1.w, c5.z
                mul r0, r0.w, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 23 instruction slots used (1 texture, 22 arithmetic)
            };
    }
    pass ArmorColoredAndBlack
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uSaturation  c1       1
            //
            
                preshader
                neg r0.xyz, c0.xyz
                add c0.xyz, (1, 1, 1), r0.xyz
                neg r0.x, c1.x
                add r1.x, r0.x, (1)
                rcp r0.x, c1.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c1.x, r2.x
                add c2.x, r0.x, (1)
            
            // approximately 9 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c3       1
            //   uSaturation  c4       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c5, 0.5, 1.5, 1, 0
                def c6, 0.660000026, 0.330000013, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r1.x, r2.w, r2.x
                add r1.y, r2.w, -r2.x
                mad r1.z, r1.x, -c5.x, c5.y
                mov r1.w, c5.z
                mad r2.xyz, r1.z, -c0, r1.w
                mad r2.w, r1.x, -c5.x, c5.x
                mul r3.xyz, r1.x, c3
                cmp r2.xyz, r2.w, r3, r2
                mad r2.xyz, r1.x, -c5.x, r2
                mul r2.w, r1.x, c5.x
                mul r1.x, r1.y, c4.x
                mad r1.y, r1.y, c6.x, c6.y
                mov r3.x, c1.x
                mad r1.x, r1.x, r3.x, c2.x
                mad r2.xyz, r1.x, r2, r2.w
                mul r2.xyz, r0.w, r2
                mul r0.xyz, r1.y, r2
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 24 instruction slots used (1 texture, 23 arithmetic)
            };
    }
    pass ArmorColoredAndSilverTrim
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSaturation  c0       1
            //
            
                preshader
                neg r0.x, c0.x
                add r1.x, r0.x, (1)
                rcp r0.x, c0.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c0.x, r2.x
                add c1.x, r0.x, (1)
            
            // approximately 7 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c2       1
            //   uSaturation  c3       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c4, 0.5, 1.5, 1, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r1.x, r2.w, r2.x
                add r1.y, r2.w, -r2.x
                mul r1.y, r1.y, c3.x
                mov r2.x, c0.x
                mad r1.y, r1.y, r2.x, c1.x
                mul r1.x, r1.x, c4.x
                mul r1.x, r1.y, r1.x
                mul r1.x, r0.w, r1.x
                mul r2.xyz, r0, c2
                mad r3.xyz, r1.x, c4.y, -r2
                mad r0.xyz, r1.y, r3, r2
                min r1, r0, c4.z
                mul r0, r1, v0
                mov oC0, r0
            
            // approximately 19 instruction slots used (1 texture, 18 arithmetic)
            };
    }
    pass ArmorSilverTrim
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSaturation  c0       1
            //
            
                preshader
                neg r0.x, c0.x
                add r1.x, r0.x, (1)
                rcp r0.x, c0.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c0.x, r2.x
                add c1.x, r0.x, (1)
            
            // approximately 7 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSaturation  c2       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, 0.5, 1.5, 1, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r1.x, r2.w, r2.x
                add r1.y, r2.w, -r2.x
                mul r1.y, r1.y, c2.x
                mov r2.x, c0.x
                mad r1.y, r1.y, r2.x, c1.x
                mul r1.x, r1.x, c3.x
                mul r1.x, r1.y, r1.x
                mul r1.x, r0.w, r1.x
                mul r2.xyz, r0, r0
                mad r3.xyz, r1.x, c3.y, -r2
                mad r0.xyz, r1.y, r3, r2
                min r1, r0, c3.z
                mul r0, r1, v0
                mov oC0, r0
            
            // approximately 19 instruction slots used (1 texture, 18 arithmetic)
            };
    }
    pass ArmorBrightnessColored
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c1, 0.333333343, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r1.w, r0.y, r0.x
                add r1.x, r0.z, r1.w
                mul r1.x, r1.x, c1.x
                mul r1.xyz, r1.x, c0
                mul r0.xyz, r0.w, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 8 instruction slots used (1 texture, 7 arithmetic)
            };
    }
    pass ArmorColoredGradient
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uSaturation;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c0       1
            //   uSecondaryColor c1       1
            //   uSaturation     c2       1
            //   uSourceRect     c3       1
            //
            
                preshader
                rcp c0.x, c3.z
                neg r0.xyz, c0.xyz
                add c1.xyz, r0.xyz, c1.xyz
                neg r0.x, c2.x
                add r1.x, r0.x, (1)
                rcp r0.x, c2.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c2.x, r2.x
                add c3.x, r0.x, (1)
            
            // approximately 10 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float uSaturation;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c4       1
            //   uSaturation  c5       1
            //   uSourceRect  c6       1
            //   uImageSize0  c7       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c8, -2, 3, 1.79999995, -0.400000006
                def c9, 0.5, 1.5, 1, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.w, c7.x
                mad r1.x, t0.x, r1.w, -c6.x
                mul_sat r1.x, r1.x, c0.x
                mad r1.y, r1.x, c8.x, c8.y
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                mad r1.x, r1.x, c8.z, c8.w
                mov r2.xyz, c1
                mad r1.xyz, r1.x, r2, c4
                add r2.xyz, -r1, c9.z
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.w, r0.z, r0.y
                min r3.w, r1.w, r0.x
                add r1.w, r2.w, r3.w
                add r2.w, r2.w, -r3.w
                mul r2.w, r2.w, c5.x
                mov r0.x, c2.x
                mad r2.w, r2.w, r0.x, c3.x
                mad r0.x, r1.w, -c9.x, c9.y
                mad r0.xyz, r0.x, -r2, c9.z
                mul r1.xyz, r1, r1.w
                mad r2.x, r1.w, -c9.x, c9.x
                cmp r0.xyz, r2.x, r1, r0
                mad r0.xyz, r1.w, -c9.x, r0
                mul r1.x, r1.w, c9.x
                mad r1.xyz, r2.w, r0, r1.x
                mov r1.w, c9.z
                mul r0, r0.w, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 32 instruction slots used (1 texture, 31 arithmetic)
            };
    }
    pass ArmorColoredAndBlackGradient
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uSaturation;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c0       1
            //   uSecondaryColor c1       1
            //   uSaturation     c2       1
            //   uSourceRect     c3       1
            //
            
                preshader
                rcp c0.x, c3.z
                neg r0.xyz, c0.xyz
                add c1.xyz, r0.xyz, c1.xyz
                neg r0.x, c2.x
                add r1.x, r0.x, (1)
                rcp r0.x, c2.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c2.x, r2.x
                add c3.x, r0.x, (1)
            
            // approximately 10 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float uSaturation;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c4       1
            //   uSaturation  c5       1
            //   uSourceRect  c6       1
            //   uImageSize0  c7       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c8, -2, 3, 1.79999995, -0.400000006
                def c9, 0.5, 1.5, 1, 0
                def c10, 0.660000026, 0.330000013, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.w, c7.x
                mad r1.x, t0.x, r1.w, -c6.x
                mul_sat r1.x, r1.x, c0.x
                mad r1.y, r1.x, c8.x, c8.y
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                mad r1.x, r1.x, c8.z, c8.w
                mov r2.xyz, c1
                mad r1.xyz, r1.x, r2, c4
                add r2.xyz, -r1, c9.z
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.w, r0.z, r0.y
                min r3.w, r1.w, r0.x
                add r1.w, r2.w, r3.w
                add r2.w, r2.w, -r3.w
                mad r3.x, r1.w, -c9.x, c9.y
                mad r2.xyz, r3.x, -r2, c9.z
                mul r1.xyz, r1, r1.w
                mad r3.x, r1.w, -c9.x, c9.x
                cmp r1.xyz, r3.x, r1, r2
                mad r1.xyz, r1.w, -c9.x, r1
                mul r1.w, r1.w, c9.x
                mul r2.x, r2.w, c5.x
                mad r2.y, r2.w, c10.x, c10.y
                mov r3.x, c2.x
                mad r2.x, r2.x, r3.x, c3.x
                mad r1.xyz, r2.x, r1, r1.w
                mul r1.xyz, r0.w, r1
                mul r0.xyz, r2.y, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 33 instruction slots used (1 texture, 32 arithmetic)
            };
    }
    pass ArmorBrightnessGradient
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c0       1
            //   uSecondaryColor c1       1
            //   uSourceRect     c2       1
            //
            
                preshader
                rcp c0.x, c2.z
                neg r0.xyz, c0.xyz
                add c1.xyz, r0.xyz, c1.xyz
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c2       1
            //   uSourceRect  c3       1
            //   uImageSize0  c4       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c5, 0.5, -2, 3, 0
                def c6, 1.79999995, -0.400000006, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.w, c4.x
                mad r1.x, t0.x, r1.w, -c3.x
                mul_sat r1.x, r1.x, c0.x
                mad r1.y, r1.x, c5.y, c5.z
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                mad r1.x, r1.x, c6.x, c6.y
                mov r2.xyz, c1
                mad r1.xyz, r1.x, r2, c2
                add r1.w, r0.y, r0.x
                add r1.w, r0.z, r1.w
                mul r1.w, r1.w, c5.x
                mul r1.xyz, r1, r1.w
                mul r0.xyz, r0.w, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 17 instruction slots used (1 texture, 16 arithmetic)
            };
    }
    pass ArmorColoredRainbow
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uSaturation;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSaturation  c0       1
            //   uSourceRect  c1       1
            //
            
                preshader
                rcp c0.x, c1.z
                neg r0.x, c0.x
                add r1.x, r0.x, (1)
                rcp r0.x, c0.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c1.x, r2.x
                add c2.x, r0.x, (1)
            
            // approximately 8 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float uSaturation;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSaturation  c3       1
            //   uSourceRect  c4       1
            //   uImageSize0  c5       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c6, -2, 3, -1, 1
                def c7, -0.400000006, 0.266000003, -0.0670000017, 1.79999995
                def c8, 0.5, 1.5, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.w, c5.x
                mad r1.x, t0.x, r1.w, -c4.x
                mul_sat r1.x, r1.x, c0.x
                mad r1.y, r1.x, c6.x, c6.y
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                mad r1.xyz, r1.x, c7.w, c7
                abs r2.xyz, r1
                frc r2.xyz, r2
                cmp r1.xyz, r1, r2, -r2
                mad r1.xyz, r1, c6.y, c6.z
                abs r1.xyz, r1
                add r1.xyz, -r1, c6.w
                add r2.xyz, -r1, c6.w
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.w, r0.z, r0.y
                min r3.w, r1.w, r0.x
                add r1.w, r2.w, r3.w
                add r2.w, r2.w, -r3.w
                mul r2.w, r2.w, c3.x
                mov r0.x, c1.x
                mad r2.w, r2.w, r0.x, c2.x
                mad r0.x, r1.w, -c8.x, c8.y
                mad r0.xyz, r0.x, -r2, c6.w
                mul r1.xyz, r1, r1.w
                mad r2.x, r1.w, -c8.x, c8.x
                cmp r0.xyz, r2.x, r1, r0
                mad r0.xyz, r1.w, -c8.x, r0
                mul r1.x, r1.w, c8.x
                mad r1.xyz, r2.w, r0, r1.x
                mov r1.w, c6.w
                mul r0, r0.w, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 36 instruction slots used (1 texture, 35 arithmetic)
            };
    }
    pass ArmorBrightnessRainbow
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //
            
                preshader
                rcp c2.x, c0.z
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //   uImageSize0  c1       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, 0.5, -2, 3, -1
                def c4, -0.400000006, 0.266000003, -0.0670000017, 1.79999995
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.w, c1.x
                mad r1.x, t0.x, r1.w, -c0.x
                mul_sat r1.x, r1.x, c2.x
                mad r1.y, r1.x, c3.y, c3.z
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                mad r1.xyz, r1.x, c4.w, c4
                abs r2.xyz, r1
                frc r2.xyz, r2
                cmp r1.xyz, r1, r2, -r2
                mad r1.xyz, r1, c3.z, c3.w
                abs r1.xyz, r1
                add r1.xyz, -r1, -c3.w
                add r1.w, r0.y, r0.x
                add r1.w, r0.z, r1.w
                mul r1.w, r1.w, c3.x
                mul r1.xyz, r1, r1.w
                mul r0.xyz, r0.w, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 21 instruction slots used (1 texture, 20 arithmetic)
            };
    }
    pass ArmorLivingRainbow
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //
            
                preshader
                rcp c0.x, c1.z
                mul c1.x, c0.x, (0.8)
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c2       1
            //   uImageSize0  c3       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c4, 0.150000006, 0.333000004, 0.666000009, 0
                def c5, 0.5, -2, 3, 0.400000006
                def c6, 3, -1, 1, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.w, c3.x
                mad r1.x, t0.x, r1.w, -c2.x
                mul_sat r1.x, r1.x, c0.x
                mad r1.y, r1.x, c5.y, c5.z
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                mov r1.w, c5.w
                mad r1.x, r1.x, r1.w, c1.x
                add r1.y, r0.y, r0.x
                add r1.y, r0.z, r1.y
                mad r1.x, r1.y, c4.x, r1.x
                mul r1.y, r1.y, c5.x
                add r2.xyz, r1.x, c4.wzyx
                abs r3.xyz, r2
                frc r3.xyz, r3
                cmp r2.xyz, r2, r3, -r3
                mad r2.xyz, r2, c6.x, c6.y
                abs r2.xyz, r2
                add r2.xyz, -r2, c6.z
                mul r1.xyz, r1.y, r2
                mul r0.xyz, r0.w, r1
                min r1, r0, c6.z
                max r0.xyz, v0, v0.w
                lrp r2.xyz, c5.w, r0, v0
                mov r2.w, v0.w
                mul r0, r1, r2
                mov oC0, r0
            
            // approximately 28 instruction slots used (1 texture, 27 arithmetic)
            };
    }
    pass ArmorInvert
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c0, 1, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.w, c0.x
                add r1.xyz, -r0, c0.x
                mul r0, r0.w, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 6 instruction slots used (1 texture, 5 arithmetic)
            };
    }
    pass ArmorLivingOcean
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //
            
                preshader
                rcp c0.x, c1.z
                mul c1.x, c0.x, (0.1)
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c2       1
            //   uImageSize0  c3       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c4, 0.333333343, -2, 3, -0.5
                def c5, 5, 0.999493062, 0.5, 0
                def c6, 0, 1, 1, 0
                def c7, 6.28318548, -3.14159274, 0.200000003, 0.600000024
                def c8, 0, -0.899999976, 0, 0
                def c9, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c10, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.w, c3.x
                mad r1.x, t0.x, r1.w, -c2.x
                mul_sat r1.x, r1.x, c0.x
                mad r1.y, r1.x, c4.y, c4.z
                mul r1.x, r1.x, r1.x
                mad r1.x, r1.y, r1.x, c4.w
                add r1.y, r0.y, r0.x
                add r1.y, r0.z, r1.y
                mul r1.y, r1.y, c4.x
                mul r1.x, r1.x, r1.y
                mov r1.w, c4.w
                mad r1.x, r1.x, -r1.w, c1.x
                mul r1.z, r1.x, c5.x
                abs r1.z, r1.z
                frc r1.z, r1.z
                cmp r1.x, r1.x, r1.z, -r1.z
                mad r1.x, r1.x, c5.y, c5.z
                frc r1.x, r1.x
                mad r1.x, r1.x, c7.x, c7.y
                sincos r2.x, r1.x, c9, c10
                mad r1.x, r2.x, -c7.z, c7.w
                mov r2.xyz, c8
                mad r2.xyz, r1.x, r2, c6
                mul r1.xyz, r1.y, r2
                mul r0.xyz, r0.w, r1
                mul r0, r0, v0.w
                mov oC0, r0
            
            // approximately 35 instruction slots used (1 texture, 34 arithmetic)
            };
    }
    pass ArmorLivingFlame
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //
            
                preshader
                rcp c5.x, c0.z
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c0       1
            //   uSecondaryColor c1       1
            //   uTime           c2       1
            //   uSourceRect     c3       1
            //   uImageSize0     c4       1
            //   uImage0         s0       1
            //
            
                ps_2_0
                def c6, 0.333333343, -2, 3, 0.666666687
                def c7, 0.795774698, 0.5, 6.28318548, -3.14159274
                def c8, 0.400000006, 0.600000024, 0, 0
                def c9, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c10, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.w, c4.x
                mad r1.x, t0.x, r1.w, -c3.x
                mul_sat r1.x, r1.x, c5.x
                mad r1.y, r1.x, c6.y, c6.z
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                add r1.y, r0.y, r0.x
                add r1.y, r0.z, r1.y
                mad r1.x, r1.y, c6.w, r1.x
                mul r1.y, r1.y, c6.x
                add r1.x, r1.x, c2.x
                abs r1.z, r1.x
                frc r1.z, r1.z
                cmp r1.x, r1.x, r1.z, -r1.z
                mad r1.x, r1.x, c7.x, c7.y
                frc r1.x, r1.x
                mad r1.x, r1.x, c7.z, c7.w
                sincos r2.x, r1.x, c9, c10
                mad r1.x, r2.x, -c7.y, c7.y
                mad r2.xyz, v0, c8.x, c8.y
                mov r3.xyz, c0
                mad r2.xyz, c1, r2, -r3
                mad r2.xyz, r1.x, r2, c0
                mul r0.xyz, r1.y, r2
                mul r0, r0, v0.w
                mov oC0, r0
            
            // approximately 34 instruction slots used (1 texture, 33 arithmetic)
            };
    }
    pass ArmorWisp
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float3 uSecondaryColor;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c0       1
            //   uSecondaryColor c1       1
            //
            
                preshader
                neg r0.xyz, c1.xyz
                add c0.xyz, r0.xyz, c0.xyz
                neg r0.xyz, c0.xyz
                add c1.xyz, (1, 1, 1), r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float3 uSecondaryColor;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c2       1
            //   uSecondaryColor c3       1
            //   uImage0         s0       1
            //
            
                ps_2_0
                def c4, 0.333333343, -0.200000003, -0.400000006, 5
                def c5, 1, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r0.x, r0.y, r0.x
                add r0.x, r0.z, r0.x
                mad r0.y, r0.x, c4.x, c4.z
                mad r0.x, r0.x, c4.x, c4.y
                mul r0.z, r0.y, c4.w
                min r1.w, r0.z, c5.x
                mov r1.xyz, c1
                mad r1.xyz, r1.w, r1, c2
                mul r1.w, r0.x, c4.w
                mov r2.xyz, c3
                mad r2.xyz, r1.w, c0, r2
                cmp r1.xyz, r0.y, r1, r2
                cmp r1.xyz, r0.x, r1, c3
                mov r1.w, c5.x
                mul r0, r0.w, r1
                min r1, r0, c5.x
                max r0.xyz, v0, v0.w
                lrp r2.xyz, -c4.y, r0, v0
                mov r2.w, v0.w
                mul r0, r1, r2
                mov oC0, r0
            
            // approximately 22 instruction slots used (1 texture, 21 arithmetic)
            };
    }
    pass ArmorHighContrastGlow
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uSaturation  c1       1
            //
            
                preshader
                neg r0.xyz, c0.xyz
                add c0.xyz, (1, 1, 1), r0.xyz
                neg r0.x, c1.x
                add r1.x, r0.x, (1)
                rcp r0.x, c1.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c1.x, r2.x
                add c2.x, r0.x, (1)
            
            // approximately 9 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uSaturation;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c3       1
            //   uSaturation  c4       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c5, 0.5, 1.5, 1, 0.0500000007
                def c6, -0.150000006, 0.200000003, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r0.x, r2.w, r2.x
                add r0.y, r2.w, -r2.x
                mad r0.z, r0.x, -c5.x, c5.y
                mov r1.z, c5.z
                mad r1.xyz, r0.z, -c0, r1.z
                mad r1.w, r0.x, -c5.x, c5.x
                mul r2.xyz, r0.x, c3
                cmp r1.xyz, r1.w, r2, r1
                mad r1.xyz, r0.x, -c5.x, r1
                mul r1.w, r0.x, c5.x
                mul r0.x, r0.y, c4.x
                mov r2.x, c6.x
                mad r0.y, r0.y, c4.x, r2.x
                add r0.y, r0.y, r0.y
                mov r2.x, c1.x
                mad r0.x, r0.x, r2.x, c2.x
                mad r1.xyz, r0.x, r1, r1.w
                mul r1.w, v0.x, c5.w
                mad r0.x, v0.x, -c5.w, c5.y
                mad r1.w, r0.y, r0.x, r1.w
                mul r1.xyz, r1, r1.w
                mov r1.w, c5.z
                mul r0, r0.w, r1
                min r1, r0, c5.z
                max r0.xyz, v0, v0.w
                lrp r2.xyz, c6.y, r0, v0
                mov r2.w, v0.w
                mul r0, r1, r2
                mov oC0, r0
            
            // approximately 34 instruction slots used (1 texture, 33 arithmetic)
            };
    }
    pass ArmorPlaid
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //
            
                preshader
                rcp c2.x, c0.z
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //   uImageSize0  c1       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, -2, 3, 0.5, 0.100000001
                def c4, 10, 0.127323955, 0.5, -0.200000003
                def c5, 6.28318548, -3.14159274, 0.333333343, 1
                def c6, 0, 0, 0, 0
                def c7, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c8, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.xy, c1
                mad r1.yz, t0.zxyw, r1.zxyw, -c0.zxyw
                mad r1.z, r1.z, c4.y, c4.z
                mad r1.x, r1.y, r1.x, -c0.x
                mul_sat r1.x, r1.x, c2.x
                frc r1.y, r1.z
                mad r1.y, r1.y, c5.x, c5.y
                sincos r2.x, r1.y, c7, c8
                mad r1.y, r2.x, c4.z, c4.w
                mul_sat r1.y, r1.y, c4.x
                mad r1.z, r1.y, c3.x, c3.y
                mul r1.y, r1.y, r1.y
                mul r1.y, r1.z, r1.y
                mul r2.y, r1.y, c3.z
                mad r1.y, r1.x, c3.x, c3.y
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                sincos r3.y, r1.x, c7, c8
                mad r1.x, r3.y, c3.z, c3.w
                mul_sat r1.x, r1.x, c4.x
                mad r1.y, r1.x, c3.x, c3.y
                mul r1.x, r1.x, r1.x
                mad r2.x, r1.y, r1.x, -r2.y
                rcp r1.x, r0.w
                mul r0.xy, r0, r1.x
                add r0.x, r0.y, r0.x
                mad r0.x, r0.z, r1.x, r0.x
                mul r0.xy, r0.x, c5.z
                mul r1.xy, r2, r0
                mov r1.w, c5.w
                mov r0.xy, v0
                mov r0.z, v0.w
                mul r1.xy, r1, r0
                mul r1.z, r1.w, r0.z
                mul r2.xy, r0.w, r1
                mul r2.w, r0.w, r1.z
                mov r2.z, c6.x
                mov oC0, r2
            
            // approximately 53 instruction slots used (1 texture, 52 arithmetic)
            };
    }
    pass ArmorDev
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //   uImageSize0  c1       1
            //
            
                preshader
                rcp r0.x, c1.x
                add c0.x, r0.x, r0.x
                rcp c1.x, c0.z
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uDirection;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c2       1
            //   uSourceRect  c3       1
            //   uDirection   c4       1
            //   uImageSize0  c5       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c6, 0, 6, 1, 0
                def c7, 0.159154937, 0.5, 6.28318548, -3.14159274
                def c8, 43758.5469, -2, 3, 4
                def c9, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c10, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                add r0.w, t0.y, c2.x
                mad r0.x, r0.w, c7.x, c7.y
                frc r0.x, r0.x
                mad r0.x, r0.x, c7.z, c7.w
                sincos r1.y, r0.x, c9, c10
                mul r0.x, r1.y, c8.x
                frc r0.x, r0.x
                mul r0.x, r0.x, c0.x
                mul r0.x, r0.x, c4.x
                add r0.y, r0.x, r0.x
                mov r1.x, c5.x
                mad r0.z, t0.x, r1.x, -c3.x
                mul_sat r0.z, r0.z, c1.x
                mad r0.w, r0.z, c8.y, c8.z
                mul r0.z, r0.z, r0.z
                mad r0.y, r0.w, r0.z, r0.y
                add r1.x, r0.y, -c0.x
                mov r1.y, t0.y
                mov r0.w, c8.w
                mad r2.x, r0.x, r0.w, -c0.x
                mov r0.y, c6.y
                mad r0.x, r0.x, r0.y, -c0.x
                mov r2.y, c6.x
                add r2.xy, r2, t0
                mov r0.y, c6.x
                add r0.xy, r0, t0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r0, r0, s0
                mov r0.x, r1.x
                mov r0.y, r2.y
                mov r0.w, c6.z
                mul r0, r1.w, r0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 42 instruction slots used (3 texture, 39 arithmetic)
            };
    }
    pass ArmorPlaid
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //
            
                preshader
                rcp c2.x, c0.z
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //   uImageSize0  c1       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, -2, 3, 0.5, 0.100000001
                def c4, 10, 0.127323955, 0.5, -0.200000003
                def c5, 6.28318548, -3.14159274, 0.333333343, 1
                def c6, 0, 0, 0, 0
                def c7, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c8, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.xy, c1
                mad r1.yz, t0.zxyw, r1.zxyw, -c0.zxyw
                mad r1.z, r1.z, c4.y, c4.z
                mad r1.x, r1.y, r1.x, -c0.x
                mul_sat r1.x, r1.x, c2.x
                frc r1.y, r1.z
                mad r1.y, r1.y, c5.x, c5.y
                sincos r2.x, r1.y, c7, c8
                mad r1.y, r2.x, c4.z, c4.w
                mul_sat r1.y, r1.y, c4.x
                mad r1.z, r1.y, c3.x, c3.y
                mul r1.y, r1.y, r1.y
                mul r1.y, r1.z, r1.y
                mul r2.y, r1.y, c3.z
                mad r1.y, r1.x, c3.x, c3.y
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                sincos r3.y, r1.x, c7, c8
                mad r1.x, r3.y, c3.z, c3.w
                mul_sat r1.x, r1.x, c4.x
                mad r1.y, r1.x, c3.x, c3.y
                mul r1.x, r1.x, r1.x
                mad r2.x, r1.y, r1.x, -r2.y
                rcp r1.x, r0.w
                mul r0.xy, r0, r1.x
                add r0.x, r0.y, r0.x
                mad r0.x, r0.z, r1.x, r0.x
                mul r0.xy, r0.x, c5.z
                mul r1.xy, r2, r0
                mov r1.w, c5.w
                mov r0.xy, v0
                mov r0.z, v0.w
                mul r1.xy, r1, r0
                mul r1.z, r1.w, r0.z
                mul r2.xy, r0.w, r1
                mul r2.w, r0.w, r1.z
                mov r2.z, c6.x
                mov oC0, r2
            
            // approximately 53 instruction slots used (1 texture, 52 arithmetic)
            };
    }
    pass ArmorReflectiveColor
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImageSize0  c0       1
            //
            
                preshader
                rcp r0.x, c0.x
                rcp r0.y, c0.y
                add r1.xy, r0.xy, r0.xy
                mov c0.x, r1.y
                mov c1.x, r1.x
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float3 uLightSource;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c2       1
            //   uLightSource c3       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c4, 0, 0.333333343, 1, -0.300000012
                def c5, 1.53846157, -0.461538464, -2, 3
                def c6, 0.5, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                mov r0.x, -c1.x
                mov r0.y, c4.x
                add r0.xy, r0, t0
                add r1.x, t0.x, c1.x
                mov r1.y, t0.y
                mov r2.x, t0.x
                add r2.y, t0.y, c0.x
                mov r3.x, t0.x
                add r3.y, t0.y, -c0.x
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, t0, s0
                add r0.xyz, r0, -r1
                add r2.w, r0.y, r0.x
                add r2.w, r0.z, r2.w
                mul r0.x, r2.w, c4.y
                add r1.xyz, -r2, r3
                add r0.w, r1.y, r1.x
                add r0.w, r1.z, r0.w
                mul r0.y, r0.w, c4.y
                mul r0.w, r0.y, r0.y
                mad r0.w, r0.x, r0.x, r0.w
                add r0.w, -r0.w, c4.z
                rsq r1.x, r0.w
                rcp r1.x, r1.x
                cmp r0.z, r0.w, r1.x, c4.x
                dp3 r0.x, r0, c3
                add r0.y, r0.x, c4.w
                mul r0.y, r0.y, c5.x
                cmp_sat r0.x, r0.x, r0.y, c5.y
                mad r0.y, r0.x, c5.z, c5.w
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.y, r0.x
                add r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r4.w, r0.x
                add r0.y, r4.y, r4.x
                add r0.y, r4.z, r0.y
                mul r0.y, r0.y, c4.y
                mul r0.yzw, r0.y, c2.wzyx
                mul r1.xyz, r0.wzyx, c6.x
                mad r4.xyz, r0.x, r0.wzyx, r1
                mul r0, r4, v0
                mov oC0, r0
            
            // approximately 46 instruction slots used (5 texture, 41 arithmetic)
            };
    }
    pass ArmorBasicColor
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uOpacity;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uOpacity     c1       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0.xyz, r0, c0
                mul r0, r0, v0
                mul r0, r0, c1.x
                mov oC0, r0
            
            // approximately 5 instruction slots used (1 texture, 4 arithmetic)
            };
    }
    pass ArmorHades
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float uRotation;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uRotation    c0       1
            //   uTime        c1       1
            //   uSourceRect  c2       1
            //   uImageSize0  c3       1
            //
            
                preshader
                add r0.x, c2.w, c2.y
                rcp r0.y, c3.y
                mul r1.x, r0.x, r0.y
                neg r1.y, r0.y
                mov r2.y, r0.y
                add c1.x, r1.x, r1.y
                rcp r2.x, c3.x
                add r0.xy, r2.xy, r2.xy
                neg r0.z, c0.x
                add r1.x, r0.z, (1.57075)
                mul r0.z, r1.x, (0.159154943)
                add r1.x, r0.z, (0.5)
                frc r0.z, r1.x
                mul r1.x, r0.z, (6.28318531)
                add r0.z, r1.x, (-3.14159265)
                cos r1.x, r0.z
                sin r1.y, r0.z
                mul r2.xy, r0.xy, r1.xy
                mul c0.xy, (3, 3), r2.xy
                mov c2.xy, r2.xy
                mul c3.xy, (0.5, 0.5), c2.zw
                mul c6.x, c1.x, (10)
                mul r0.x, c0.x, (0.159154943)
                add r1.x, r0.x, (0.5)
                frc r0.x, r1.x
                mul r1.x, r0.x, (6.28318531)
                add r0.x, r1.x, (-3.14159265)
                cos r1.x, r0.x
                sin r1.y, r0.x
                mov c4.x, r1.x
                mov c5.x, r1.y
            
            // approximately 31 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c7       1
            //   uSecondaryColor c8       1
            //   uSourceRect     c9       1
            //   uImageSize0     c10      1
            //   uImage0         s0       1
            //
            
                ps_2_0
                def c11, 0.159154937, 0.5, 6.28318548, -3.14159274
                def c12, 1, 0.333333343, 1.66666663, 0
                def c13, 0.100000001, 1, 1.5, 1.39999998
                def c14, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c15, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                mov r0.xy, c10
                mad r0.xy, t0, r0, -c9
                add r0.xy, r0, -c3
                mul r0.z, r0.y, c5.x
                mad r1.x, r0.x, c4.x, -r0.z
                mul r0.y, r0.y, c4.x
                mad r1.y, r0.x, c5.x, r0.y
                add r0.xy, r1, c3
                add r0.y, r0.y, c6.x
                mad r0.x, r0.x, c11.x, c11.y
                frc r0.x, r0.x
                mad r0.x, r0.x, c11.z, c11.w
                sincos r1.y, r0.x, c14, c15
                mad r0.x, r0.y, c11.x, c11.y
                frc r0.x, r0.x
                mad r0.x, r0.x, c11.z, c11.w
                sincos r2.y, r0.x, c14, c15
                add r0.xy, t0, c2
                min r3.y, c1.x, r0.y
                mov r3.x, r0.x
                add r0.xy, t0, c0
                min r4.y, c1.x, r0.y
                mov r4.x, r0.x
                texld r0, r3, s0
                texld r3, r4, s0
                texld r4, t0, s0
                mad r0.x, r1.y, r2.y, r0.w
                min r1.w, r0.x, c12.x
                mul r1.xyz, r1.w, c7
                max r2.x, r3.w, r0.w
                add r0.x, r4.y, r4.x
                add r0.x, r4.z, r0.x
                mad r0.y, r0.x, -c12.z, r2.x
                mul r0.x, r0.x, c12.y
                mul r2.xyz, r0.x, c8
                mul r1, r1, r0.y
                cmp r0, r0.y, r1, c12.w
                mad r1.x, r4.w, -c13.x, c13.y
                mul r1, r0, r1.x
                mul r1, r1, c13.z
                cmp r0, r0, r1, c12.w
                mov r2.w, c12.x
                mad r0, r2, r4.w, r0
                mul r0, r0, c13.w
                min r1, r0, c12.x
                max r0.xyz, v0, v0.w
                lrp r2.xyz, c11.y, r0, v0
                mov r2.w, v0.w
                mul r0, r1, r2
                mov oC0, r0
            
            // approximately 64 instruction slots used (3 texture, 61 arithmetic)
            };
    }
    pass ArmorTwilight
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uDirection;
            //   float2 uImageSize1;
            //   float4 uSourceRect;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uSourceRect     c0       1
            //   uTargetPosition c1       1
            //   uDirection      c2       1
            //   uImageSize1     c3       1
            //
            
                preshader
                rcp c0.x, c3.x
                rcp c0.y, c3.y
                mul r0.x, c1.x, c2.x
                rcp r0.y, c0.z
                mul r1.x, r0.x, r0.y
                rcp r0.x, c0.w
                mul r1.y, r0.x, c1.y
                mul c1.xy, (0.004, 0.004), r1.xy
                mul c2.xy, (0.02, 0.02), r1.xy
            
            // approximately 9 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c3       1
            //   uSourceRect  c4       1
            //   uImageSize0  c5       1
            //   uImage0      s0       1
            //   uImage1      s1       1
            //
            
                ps_2_0
                def c6, 0.125, -0.600000024, 5, 20
                def c7, 0.25, -0.699999988, 0.349999994, 0.0500000007
                def c8, -2, 3, -0.400000006, 2.5
                def c9, 0.0333333351, 1, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mov r0.xy, c5
                mad r0.xy, t0, r0, -c4
                mul r0.zw, r0.wzyx, c0.wzyx
                mov r1.xy, c0
                mad r0.xy, r0, r1, c2
                mov r1.x, c6.x
                mad r1.xy, r0.wzyx, r1.x, c1
                texld r0, r0, s1
                texld r1, r1, s1
                texld r2, t0, s0
                add r0.x, r0.x, c6.y
                mul_sat r0.x, r0.x, c6.z
                mad r0.w, r0.x, c8.x, c8.y
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.w, r0.x
                mul r0.x, r0.x, c6.w
                mad r0.x, r1.x, c7.z, r0.x
                add r0.x, r0.x, c7.w
                add r0.y, r0.y, c8.z
                add r0.z, r0.z, c7.y
                mul_sat r0.z, r0.z, c6.z
                mul_sat r0.y, r0.y, c8.w
                mad r0.w, r0.y, c8.x, c8.y
                mul r0.y, r0.y, r0.y
                mul r0.y, r0.w, r0.y
                mul r0.y, r0.y, c7.x
                mad r1.xyz, r0.x, c3, r0.y
                mad r1.w, r0.z, c8.x, c8.y
                mul r0.x, r0.z, r0.z
                mul r1.w, r1.w, r0.x
                mad r0.xyz, r1.w, -c8.x, r1
                add r0.w, r2.y, r2.x
                add r0.w, r2.z, r0.w
                mad r0.xyz, r0.w, c9.x, r0
                mov r0.w, c9.y
                mul r0, r2.w, r0
                mul r0, r0, v0.w
                mov oC0, r0
            
            // approximately 38 instruction slots used (3 texture, 35 arithmetic)
            };
    }
    pass ArmorAcid
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //
            
                preshader
                rcp c0.x, c1.z
                rcp c0.y, c1.w
                mul c1.x, c0.x, (4)
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c2       1
            //   uSourceRect  c3       1
            //   uImageSize0  c4       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c5, 0.333333343, 0, -0.5, 0.100000001
                def c6, 5, 20, 0.318309963, 3.14159203
                def c7, 1.5, 1, 2, 0.100000001
                def c8, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c9, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.xy, c4
                mad r1.xy, t0, r1, -c3
                mov r2.yz, c5
                mad r1.xy, r1, c0, r2.yzxw
                add r2.x, r1.x, c5.z
                add r0.x, r0.y, r0.x
                add r0.x, r0.z, r0.x
                mul r0.x, r0.x, c5.x
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad r2.y, r0.x, c5.w, r1.y
                dp2add r0.y, r2, r2, c5.y
                rsq r0.y, r0.y
                rcp r0.y, r0.y
                mul r0.z, r0.x, c6.x
                mad r0.y, r0.y, c6.y, -r0.z
                add r0.y, r0.y, -c1.x
                mul r0.z, r0.y, c6.z
                abs r0.z, r0.z
                frc r0.z, r0.z
                cmp r0.y, r0.y, r0.z, -r0.z
                mul r0.y, r0.y, c6.w
                sincos r1.y, r0.y, c8, c9
                add r0.y, r1.y, c7.x
                mul r0.z, r0.x, r0.x
                mad r0.z, r0.z, -r0.x, c7.y
                mul r1.xyz, r0.x, c2
                mad r1.w, r0.y, -r0.z, c7.y
                mul r1.xyz, r1, r1.w
                mov r1.w, c7.y
                mul r0, r0.w, r1
                mad r1.x, v0.w, c7.z, c7.w
                min r2, r1.x, r0
                min r0, r2, c7.y
                max r1.xyz, v0, v0.w
                lrp r2.xyz, -c5.z, r1, v0
                mov r2.w, v0.w
                mul r0, r0, r2
                mov oC0, r0
            
            // approximately 48 instruction slots used (1 texture, 47 arithmetic)
            };
    }
    pass ArmorMushroom
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c1, 0.333333343, -0.300000012, 1.66666663, 1
                def c2, -2, 3, 0.25, 0
                def c3, 0.5, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r1.w, r0.y, r0.x
                add r1.x, r0.z, r1.w
                mad r1.x, r1.x, c1.x, c1.y
                mul_sat r1.y, r1.x, c1.z
                mad r1.z, r1.y, c2.x, c2.y
                mul r1.y, r1.y, r1.y
                mad r1.y, r1.z, -r1.y, c1.w
                mul r0.xyz, r0, c2.z
                mad r2.xyz, c0, r1.y, -r0
                mad r0.xyz, r1.y, r2, r0
                cmp r1.xyz, r1.x, r0, c2.w
                mov r1.w, c1.w
                mul r0, r0.w, r1
                min r1, r0, c1.w
                max r0.xyz, v0, v0.w
                lrp r2.xyz, c3.x, r0, v0
                mov r2.w, v0.w
                mul r0, r1, r2
                mov oC0, r0
            
            // approximately 20 instruction slots used (1 texture, 19 arithmetic)
            };
    }
    pass ArmorPhase
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float2 uImageSize0;
            //   float2 uImageSize1;
            //   float uSaturation;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uSaturation  c1       1
            //   uTime        c2       1
            //   uSourceRect  c3       1
            //   uImageSize0  c4       1
            //   uImageSize1  c5       1
            //
            
                preshader
                rcp r0.x, c4.x
                rcp r0.z, c4.x
                rcp r0.y, c4.y
                rcp r0.w, c4.y
                add r1.xy, r0.zw, r0.zw
                mul r2, r0, c3
                rcp c0.x, r1.x
                rcp c0.y, r1.y
                mov c1.xy, r1.xy
                rcp c2.x, c5.x
                rcp c2.y, c5.y
                mul c3.x, c2.x, (0.1)
                mul r0.xy, (0.5, 0.5), r2.zw
                add c4.xy, r2.xy, r0.xy
                neg r0.xyz, c0.xyz
                add r1.xyz, (1, 1, 1), r0.xyz
                neg r0.xyz, r1.xyz
                mov c5.xyz, r1.xyz
                add c6.xyz, (1, 1, 1), r0.xyz
                neg r0.x, c1.x
                add r1.x, r0.x, (1)
                rcp r0.x, c1.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c7.x, r2.x
                add c8.x, r0.x, (1)
            
            // approximately 26 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float2 uImageSize0;
            //   float uSaturation;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c9       1
            //   uSaturation  c10      1
            //   uSourceRect  c11      1
            //   uImageSize0  c12      1
            //   uImage0      s0       1
            //   uImage1      s1       1
            //
            
                ps_2_0
                def c13, 0.5, 2, 0.100000001, 0.833333313
                def c14, 0.909090936, -0.200000003, 1.25, 5
                def c15, -2, 3, 0.333333343, 0
                def c16, 0.5, 1.5, 1, 0
                def c17, 0.660000026, 0.330000013, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r1.x, r2.w, r2.x
                add r1.y, r2.w, -r2.x
                mad r1.z, r1.x, -c16.x, c16.y
                mov r1.w, c16.z
                mad r2.xyz, r1.z, -c6, r1.w
                mad r2.w, r1.x, -c13.x, c13.x
                mul r3.xyz, r1.x, c5
                cmp r2.xyz, r2.w, r3, r2
                mad r2.xyz, r1.x, -c13.x, r2
                mul r2.w, r1.x, c13.x
                mul r1.x, r1.y, c10.x
                mad r1.y, r1.y, c17.x, c17.y
                mov r3.x, c7.x
                mad r1.x, r1.x, r3.x, c8.x
                mad r2.xyz, r1.x, r2, r2.w
                mad r2.xyz, r2, -r0.w, c16.z
                mul r2.xyz, r0.w, r2
                mul r1.xyz, r1.y, r2
                mov r2.xy, c12
                mad r2.xy, t0, r2, -c11
                mul r2.xy, r2, c13.x
                frc r2.zw, r2.wzyx
                add r2.xy, r2, -r2.wzyx
                add r2.xy, r2, r2
                mul r2.xy, r2, c2
                mul r3.x, r2.x, c13.y
                mov r2.z, c13.z
                mad r3.y, r2.y, r2.z, c3.x
                mul r2.xy, t0, c0
                frc r2.zw, r2.wzyx
                add r2.xy, r2, -r2.wzyx
                mov r4.xy, c4
                mad r2.xy, r2, c1, -r4
                mul r4.x, r2.x, c13.w
                mov r2.x, c14.x
                mad r4.y, r2.y, r2.x, c1.y
                add r2.xy, r4, c4
                texld r3, r3, s1
                texld r2, r2, s0
                add r2.x, r3.x, c14.y
                mul_sat r2.x, r2.x, c14.z
                mad r2.y, r2.x, c15.x, c15.y
                mul r2.x, r2.x, r2.x
                mul r3.w, r2.y, r2.x
                mul r3.xyz, r3.w, c9
                mul r3, r3, c14.w
                add r0.x, r0.y, r0.x
                add r0.x, r0.z, r0.x
                mov r1.w, r0.w
                mad r0.x, r0.x, -c15.z, r2.w
                mul r2, r3, r0.x
                cmp r0, r0.x, r2, c15.w
                add r0, r1, r0
                mul r0, r0, v0.w
                mov oC0, r0
            
            // approximately 60 instruction slots used (3 texture, 57 arithmetic)
            };
    }
    pass ArmorReflective
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImageSize0  c0       1
            //
            
                preshader
                rcp r0.x, c0.x
                rcp r0.y, c0.y
                add r1.xy, r0.xy, r0.xy
                mov c0.x, r1.y
                mov c1.x, r1.x
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float3 uLightSource;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uLightSource c2       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, 0, 0.333333343, 1, -0.300000012
                def c4, 1.53846157, -0.461538464, -2, 3
                def c5, 0.5, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                mov r0.x, -c1.x
                mov r0.y, c3.x
                add r0.xy, r0, t0
                add r1.x, t0.x, c1.x
                mov r1.y, t0.y
                mov r2.x, t0.x
                add r2.y, t0.y, c0.x
                mov r3.x, t0.x
                add r3.y, t0.y, -c0.x
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, t0, s0
                add r0.xyz, r0, -r1
                add r2.w, r0.y, r0.x
                add r2.w, r0.z, r2.w
                mul r0.x, r2.w, c3.y
                add r1.xyz, -r2, r3
                add r0.w, r1.y, r1.x
                add r0.w, r1.z, r0.w
                mul r0.y, r0.w, c3.y
                mul r0.w, r0.y, r0.y
                mad r0.w, r0.x, r0.x, r0.w
                add r0.w, -r0.w, c3.z
                rsq r1.x, r0.w
                rcp r1.x, r1.x
                cmp r0.z, r0.w, r1.x, c3.x
                dp3 r0.x, r0, c2
                add r0.y, r0.x, c3.w
                mul r0.y, r0.y, c4.x
                cmp_sat r0.x, r0.x, r0.y, c4.y
                mad r0.y, r0.x, c4.z, c4.w
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.y, r0.x
                add r0.x, r0.x, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r4.w, r0.x
                mul r0.yzw, r4.wzyx, c5.x
                mad r4.xyz, r0.x, r4, r0.wzyx
                mul r0, r4, v0
                mov oC0, r0
            
            // approximately 42 instruction slots used (5 texture, 37 arithmetic)
            };
    }
    pass ArmorSolar
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float2 uImageSize0;
            //   float3 uSecondaryColor;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c0       1
            //   uSecondaryColor c1       1
            //   uTime           c2       1
            //   uImageSize0     c3       1
            //
            
                preshader
                mul r0.x, c2.x, (0.477464829)
                add r1.x, r0.x, (0.5)
                frc r0.x, r1.x
                mul r1.x, r0.x, (6.28318531)
                add r0.x, r1.x, (-3.14159265)
                sin r1.y, r0.x
                mul r0.x, r1.y, (0.2)
                add c2.x, r0.x, (1)
                neg r0.xyz, c0.xyz
                add c3.xyz, r0.xyz, c1.xyz
                rcp r0.x, c3.x
                rcp r0.y, c3.y
                add r1.xy, r0.xy, r0.xy
                mov c0.x, r1.y
                mov c1.x, r1.x
            
            // approximately 15 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c4       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c5, -0.0500000007, -0.560000002, 0.5, 1.53846157
                def c6, 0, 0.333333343, 1, -0.300000012
                def c7, -0.461538464, -2, 3, 0.769230783
                def c8, -1.29999995, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                mov r0.x, -c1.x
                mov r0.y, c6.x
                add r0.xy, r0, t0
                add r1.x, t0.x, c1.x
                mov r1.y, t0.y
                mov r2.x, t0.x
                add r2.y, t0.y, c0.x
                mov r3.x, t0.x
                add r3.y, t0.y, -c0.x
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, t0, s0
                add r0.xyz, r0, -r1
                add r2.w, r0.y, r0.x
                add r2.w, r0.z, r2.w
                mul r0.x, r2.w, c6.y
                add r1.xyz, -r2, r3
                add r0.w, r1.y, r1.x
                add r0.w, r1.z, r0.w
                mul r0.y, r0.w, c6.y
                mul r0.w, r0.y, r0.y
                mad r0.w, r0.x, r0.x, r0.w
                add r0.w, -r0.w, c6.z
                rsq r1.x, r0.w
                rcp r1.x, r1.x
                cmp r0.z, r0.w, r1.x, c6.x
                dp3 r0.x, r0, c5
                add r0.y, r0.x, c6.w
                mul r0.y, r0.y, c5.w
                cmp_sat r0.x, r0.x, r0.y, c7.x
                mad r0.y, r0.x, c7.y, c7.z
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.y, r0.x
                add r0.x, r0.x, r0.x
                mul r0.y, r0.x, c2.x
                mov r1.x, c2.x
                mad r0.x, r0.x, r1.x, c8.x
                add_sat r0.x, r0.x, r0.x
                mul r0.z, r0.y, -c6.w
                max r1.xyz, v0, v0.w
                lrp r2.xyz, r0.z, r1, v0
                mad r0.z, r0.x, c7.y, c7.z
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.z, r0.x
                mul_sat r0.z, r0.y, c7.w
                mad r0.w, r0.z, c7.y, c7.z
                mul r0.z, r0.z, r0.z
                mul r0.z, r0.w, r0.z
                mov r1.xyz, c4
                mad r1.xyz, r0.z, c3, r1
                lrp r3.xyz, r0.x, c6.z, r1
                mul r3.w, r4.w, r0.y
                mul r0.xyz, r3, r3.w
                mov r0.w, r4.w
                min r1, r0, c6.z
                mov r2.w, v0.w
                mul r0, r2, r1
                add r1.x, r4.y, r4.x
                add r1.x, r4.z, r1.x
                mul r1.x, r1.x, c6.y
                mul r1.xyz, r1.x, c4
                mul r1.xyz, r1, c5.z
                mad r4.xyz, r4, c5.z, r1
                mad r0, r4, v0, r0
                mov oC0, r0
            
            // approximately 67 instruction slots used (5 texture, 62 arithmetic)
            };
    }
    pass ArmorNebula
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //   uImageSize0  c1       1
            //
            
                preshader
                rcp r0.x, c1.x
                rcp r0.y, c1.y
                add r1.xy, r0.xy, r0.xy
                rcp c0.x, r1.x
                rcp c0.y, r1.y
                mov c1.xy, r1.xy
                mul c2.xy, r0.xy, c0.xy
                mul r1.xy, r0.xy, c0.zw
                rcp c3.x, r1.x
                rcp c3.y, r1.y
            
            // approximately 10 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float uSaturation;
            //   float3 uSecondaryColor;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c4       1
            //   uSecondaryColor c5       1
            //   uSaturation     c6       1
            //   uTime           c7       1
            //   uImage0         s0       1
            //   uImage1         s1       1
            //
            
                ps_2_0
                def c8, 0.333333343, 0.100000001, -0.400000006, 5
                def c9, 0, 1, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                mul r1.xy, t0, c0
                frc r1.zw, r1.wzyx
                add r1.xy, r1, -r1.wzyx
                mov r2.xy, c1
                mad r1.xy, r1, r2, -c2
                mov r2.y, c3.y
                mad r1.y, r1.y, r2.y, c7.x
                mul r1.x, r1.x, c3.x
                add r1.x, r1.x, r1.x
                mul r2.y, r1.y, c8.y
                add r1.y, r0.y, r0.x
                add r1.y, r0.z, r1.y
                mul r1.y, r1.y, c8.x
                mad r2.x, r1.y, c1.x, r1.x
                texld r2, r2, s1
                add r1.x, r2.x, c8.z
                mul r1.z, r1.y, r1.x
                mad r2.xyz, c4, r1.y, -r0
                mad r0.xyz, c6.x, r2, r0
                mul r1.y, r1.z, c8.w
                mul r1.yzw, r1.y, c5.wzyx
                cmp r1.xyz, r1.x, r1.wzyx, c9.x
                add r1.xyz, r0, r1
                mov r1.w, c9.y
                mul r0, r0.w, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 28 instruction slots used (2 texture, 26 arithmetic)
            };
    }
    pass ArmorVortex
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c0       1
            //   uImageSize0  c1       1
            //
            
                preshader
                rcp r0.x, c1.x
                rcp r0.y, c1.y
                add r1.xy, r0.xy, r0.xy
                rcp c0.x, r1.x
                rcp c0.y, r1.y
                mov c1.xy, r1.xy
                mul c2.xy, r0.xy, c0.xy
                mul r1.xy, r0.xy, c0.zw
                rcp c3.x, r1.x
                rcp c3.y, r1.y
            
            // approximately 10 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float3 uSecondaryColor;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c4       1
            //   uSecondaryColor c5       1
            //   uTime           c6       1
            //   uImage0         s0       1
            //   uImage1         s1       1
            //
            
                ps_2_0
                def c7, -0.5, 0.0208350997, -0.0851330012, 0.180141002
                def c8, -0.330299497, 0.999866009, 0, 1
                def c9, -2, 1.57079637, -0, -3.14159274
                def c10, 0.100000001, -0.100000001, 0.333333343, 5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mul r0.xy, t0, c0
                frc r0.zw, r0.wzyx
                add r0.xy, r0, -r0.wzyx
                mov r1.xy, c1
                mad r0.xy, r0, r1, -c2
                mov r1.x, c7.x
                mad r0.xy, r0, c3, r1.x
                abs r0.z, r0.x
                abs r0.w, r0.y
                max r1.x, r0.z, r0.w
                rcp r1.x, r1.x
                min r1.y, r0.w, r0.z
                add r0.z, -r0.z, r0.w
                cmp r0.z, r0.z, c8.z, c8.w
                mul r0.w, r1.x, r1.y
                mul r1.x, r0.w, r0.w
                mad r1.y, r1.x, c7.y, c7.z
                mad r1.y, r1.x, r1.y, c7.w
                mad r1.y, r1.x, r1.y, c8.x
                mad r1.x, r1.x, r1.y, c8.y
                mul r0.w, r0.w, r1.x
                mad r1.x, r0.w, c9.x, c9.y
                mad r0.z, r1.x, r0.z, r0.w
                cmp r0.w, r0.y, c9.z, c9.w
                add r0.z, r0.z, r0.w
                add r0.w, r0.z, r0.z
                max r1.x, r0.x, r0.y
                cmp r1.x, r1.x, c8.w, c8.z
                min r1.y, r0.y, r0.x
                cmp r1.x, r1.y, c8.z, r1.x
                mad r1.x, r1.x, -r0.w, r0.z
                mul r0.y, r0.y, r0.y
                mad r0.x, r0.x, r0.x, r0.y
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                add r1.y, r0.x, c6.x
                add r0.x, r0.x, c10.x
                min r1.z, r0.x, c8.w
                mul r0.xy, r1, c10.x
                texld r0, r0, s1
                texld r2, t0, s0
                mad r0.x, r0.x, r1.z, c10.y
                add r0.y, r2.y, r2.x
                add r0.y, r2.z, r0.y
                mul r0.y, r0.y, c10.z
                mul r0.z, r0.x, r0.y
                mul r0.z, r0.z, c10.w
                mul r1.xyz, r0.z, c5
                cmp r1.xyz, r0.x, r1, c8.z
                mad r0.xyz, c4, r0.y, r1
                mov r0.w, c8.w
                mul r0, r2.w, r0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 54 instruction slots used (2 texture, 52 arithmetic)
            };
    }
    pass ArmorStardust
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uImageSize0  c1       1
            //
            
                preshader
                rcp r0.x, c1.x
                rcp r0.y, c1.y
                add r1.xy, r0.xy, r0.xy
                rcp c0.x, r1.x
                rcp c0.y, r1.y
                mov c1.xy, r1.xy
                mul c2.x, c0.x, (0.2)
            
            // approximately 7 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float2 uImageSize0;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c3       1
            //   uSecondaryColor c4       1
            //   uSourceRect     c5       1
            //   uImageSize0     c6       1
            //   uImage0         s0       1
            //   uImage1         s1       1
            //
            
                ps_2_0
                def c7, 0.0078125, 0.333000004, 0.666000009, 0
                def c8, 3, -1, 1, 0.666666687
                def c9, 0.5, -0.100000001, 8, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mul r0.xy, t0, c0
                frc r0.zw, r0.wzyx
                add r0.xy, r0, -r0.wzyx
                mul r0.xy, r0, c1
                mov r1.xy, c6
                mad r0.xy, r0, r1, -c5
                mov r1.x, c7.x
                mad r0.z, r0.x, r1.x, c2.x
                mad r0.z, r0.y, c7.x, r0.z
                mul r0.xy, r0, c7.x
                texld r1, r0, s1
                texld r2, t0, s0
                add r0.xyz, r0.z, c7.wzyx
                abs r3.xyz, r0
                frc r3.xyz, r3
                cmp r0.xyz, r0, r3, -r3
                mad r0.xyz, r0, c8.x, c8.y
                abs r0.xyz, r0
                add r0.xyz, -r0, c8.z
                mul r0.xyz, r1, r0
                mul r0.xy, r0, r0
                add r0.x, r0.y, r0.x
                mad r0.x, r0.z, r0.z, r0.x
                mad_sat r0.x, r0.x, c9.x, c9.y
                mul r0.xyz, r0.x, c4
                mul r0.xyz, r2.w, r0
                mul r0.xyz, r0, c9.z
                add r0.w, r2.y, r2.x
                add r0.w, r2.z, r0.w
                mul r0.w, r0.w, c8.w
                mul r1.xyz, r0.w, c3
                mad r2.xyz, r1, r2.w, r0
                mul r0, r2, v0
                mov oC0, r0
            
            // approximately 34 instruction slots used (2 texture, 32 arithmetic)
            };
    }
    pass ArmorVoid
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uImageSize0  c1       1
            //
            
                preshader
                mul r0.x, c0.x, (3.18309886)
                add r1.x, r0.x, (0.5)
                frc r0.x, r1.x
                mul r1.x, r0.x, (6.28318531)
                add r0.x, r1.x, (-3.14159265)
                sin r1.y, r0.x
                rcp r0.x, c1.x
                add r1.x, r0.x, r0.x
                mul r0.x, r1.y, r1.x
                mul c0.x, r0.x, (1.5)
            
            // approximately 10 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c1, -0, 0.25, 0.5, 0.300000012
                def c2, 3, 0.349999994, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                add r0.x, t0.x, c0.x
                mov r0.y, t0.y
                mov r1.x, -c0.x
                mov r1.y, c1.x
                add r1.xy, r1, t0
                texld r0, r0, s0
                texld r2, t0, s0
                texld r1, r1, s0
                mul r0, r0, c1.y
                mad r0, r2, c1.z, r0
                mad r0, r1, c1.y, r0
                add r1.xyz, r0, c1.w
                mul r1.w, r0.z, c2.x
                mul r1.xyz, r1, r1.w
                mul r0.xyz, r1, v0
                mov r1.xyz, c2.y
                mov r1.w, v0.w
                mul r0, r0, r1
                mov oC0, r0
            
            // approximately 19 instruction slots used (3 texture, 16 arithmetic)
            };
    }
    pass ArmorShiftingSands
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize1;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //   uImageSize1  c2       1
            //
            
                preshader
                rcp c0.x, c1.w
                mul c1.x, c0.x, (2.5)
                mul c3.x, c0.x, (-0.2)
                rcp c2.x, c2.x
                rcp c2.y, c2.y
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float2 uImageSize0;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c4       1
            //   uSecondaryColor c5       1
            //   uSourceRect     c6       1
            //   uImageSize0     c7       1
            //   uImage0         s0       1
            //   uImage1         s1       1
            //
            
                ps_2_0
                def c8, 10, 0.159154937, 0.5, 0.0133333337
                def c9, 6.28318548, -3.14159274, 0.0666666701, 0.800000012
                def c10, 0.0399999991, 0.183333337, 0.300000012, -0.300000012
                def c11, 2.5, -2, 3, 0.13333334
                def c12, 0.850000024, 0.150000006, 0.699999988, 0
                def c13, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c14, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                mov r1.xy, c7
                mad r1.z, t0.y, r1.y, -c6.y
                mul r1.z, r1.z, c0.x
                mov r1.w, c8.x
                mad r1.z, r1.z, r1.w, c1.x
                mad r1.z, r1.z, c8.y, c8.z
                frc r1.z, r1.z
                mad r1.z, r1.z, c9.x, c9.y
                sincos r2.y, r1.z, c13, c14
                mad r1.z, r2.y, c8.z, c8.z
                add r1.w, r0.y, r0.x
                add r1.w, r0.z, r1.w
                mul r0.x, r1.w, c8.w
                mad r0.x, r1.z, c10.x, r0.x
                mad r0.yz, t0.zxyw, r1.zxyw, -c6.zxyw
                add r0.yz, r0, r0
                mad r0.x, r0.y, c2.x, r0.x
                mov r1.y, c2.y
                mad r0.y, r0.z, r1.y, c3.x
                texld r2, r0, s1
                mul r0.x, r1.w, c10.y
                mad r0.x, r2.x, c10.z, r0.x
                mad r0.y, r1.w, c11.w, r2.x
                mad r0.z, r1.w, c9.z, c9.w
                mul r1.xyz, r0.z, c5
                mul r1.xyz, r1, v0
                add r1.w, r0.y, -c9.w
                mul_sat r1.w, r1.w, c8.x
                add r0.x, r0.x, c10.w
                mul_sat r0.x, r0.x, c11.x
                mad r0.y, r0.x, c11.y, c11.z
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.y, r0.x
                mul r2.xyz, v0, c12.x
                mad r2.xyz, v0.w, c12.y, r2
                mad r2.xyz, c4, r2, -r1
                mad r0.xyz, r0.x, r2, r1
                mad r1.x, r1.w, c11.y, c11.z
                mul r1.y, r1.w, r1.w
                mul r1.x, r1.x, r1.y
                mul r1.yzw, v0.wzyx, c12.z
                mad r1.yzw, v0.w, c10.z, r1
                lrp r2.xyz, r1.x, r1.wzyx, r0
                mov r2.w, v0.w
                mul r0, r0.w, r2
                mov oC0, r0
            
            // approximately 54 instruction slots used (2 texture, 52 arithmetic)
            };
    }
    pass ArmorShiftingPearlsands
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize1;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //   uImageSize1  c2       1
            //
            
                preshader
                rcp c0.x, c1.w
                mul c1.x, c0.x, (2.5)
                mul c3.x, c0.x, (-0.1)
                rcp c2.x, c2.x
                rcp c2.y, c2.y
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float2 uImageSize0;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c4       1
            //   uSecondaryColor c5       1
            //   uSourceRect     c6       1
            //   uImageSize0     c7       1
            //   uImage0         s0       1
            //   uImage1         s1       1
            //
            
                ps_2_0
                def c8, 1, 0.400000006, 0.850000024, 0
                def c9, 10, 0.159154937, 0.5, 0.0133333337
                def c10, 6.28318548, -3.14159274, 0.0666666701, 0.800000012
                def c11, 0.0199999996, 0.183333337, 0.300000012, -0.300000012
                def c12, 2.5, -2, 3, 0.13333334
                def c13, -0.699999988, 0.850000024, 0.150000006, -0.200000003
                def c14, 33.3333321, 0.150000006, 0.100000001, -0.5
                def c15, 0.699999988, 0.75, 0, 0
                def c16, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c17, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                mov r1.xy, c7
                mad r1.z, t0.y, r1.y, -c6.y
                mul r1.z, r1.z, c0.x
                mov r1.w, c9.x
                mad r1.z, r1.z, r1.w, c1.x
                mad r1.z, r1.z, c9.y, c9.z
                frc r1.z, r1.z
                mad r1.z, r1.z, c10.x, c10.y
                sincos r2.y, r1.z, c16, c17
                mad r1.z, r2.y, c9.z, c9.z
                add r1.w, r0.y, r0.x
                add r1.w, r0.z, r1.w
                mul r0.x, r1.w, c9.w
                mad r0.x, r1.z, c11.x, r0.x
                mad r0.yz, t0.zxyw, r1.zxyw, -c6.zxyw
                add r0.yz, r0, r0
                mad r0.x, r0.y, c2.x, r0.x
                mov r1.y, c2.y
                mad r0.y, r0.z, r1.y, c3.x
                mul r1.xy, r0, c10.w
                texld r2, r0, s1
                texld r3, r1, s1
                mul r3.w, r1.w, c11.y
                mad r3.w, r2.x, c11.z, r3.w
                add r3.w, r3.w, c11.w
                mul_sat r3.w, r3.w, c12.x
                mad r0.x, r3.w, c12.y, c12.z
                mul r3.w, r3.w, r3.w
                mul r3.w, r0.x, r3.w
                mul r0.xyz, v0, c13.y
                mad r0.xyz, v0.w, c13.z, r0
                mad r1.x, r1.w, c10.z, c10.w
                mad r1.y, r1.w, c12.w, r3.x
                add r1.y, r1.y, c13.x
                mul_sat r1.y, r1.y, c9.x
                mul r2.xyz, r1.x, c5
                mul r2.xyz, r2, v0
                mad r0.xyz, c4, r0, -r2
                mad r0.xyz, r3.w, r0, r2
                add r1.x, r3.y, c13.w
                mad r1.z, r3.z, c15.x, c15.y
                mul_sat r1.x, r1.x, c14.x
                mad r1.w, r1.x, c12.y, c12.z
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.w, r1.x
                mov r2.yzw, c14
                mad r2.xyz, r1.x, r2.wzyx, c8
                mul r2.xyz, r1.z, r2
                mul r3.xyz, v0, -c13.x
                mad r3.xyz, v0.w, c11.z, r3
                mad r2.xyz, r2, r3, -r0
                mad r2.w, r1.y, c12.y, c12.z
                mul r1.x, r1.y, r1.y
                mul r2.w, r2.w, r1.x
                mad r1.xyz, r2.w, r2, r0
                mov r1.w, v0.w
                mul r0, r0.w, r1
                mov oC0, r0
            
            // approximately 66 instruction slots used (3 texture, 63 arithmetic)
            };
    }
    pass ArmorFog
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize1;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //   uImageSize1  c2       1
            //
            
                preshader
                rcp c0.x, c1.w
                mul c1.x, c0.x, (2.5)
                mul c3.x, c0.x, (0.04)
                rcp c2.x, c2.x
                rcp c2.y, c2.y
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float2 uImageSize0;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c4       1
            //   uSecondaryColor c5       1
            //   uSourceRect     c6       1
            //   uImageSize0     c7       1
            //   uImage0         s0       1
            //   uImage1         s1       1
            //
            
                ps_2_0
                def c8, 10, 0.159154937, 0.5, 0.0133333337
                def c9, 6.28318548, -3.14159274, 0.0666666701, 0.800000012
                def c10, 0.00400000019, 1.79999995, 0.183333337, 0.300000012
                def c11, -0.100000001, 1.25, -2, 3
                def c12, -0.200000003, 1.66666663, 0.850000024, 0.150000006
                def c13, 0.899999976, 0, 0, 0
                def c14, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c15, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                mov r1.xy, c7
                mad r1.z, t0.y, r1.y, -c6.y
                mul r1.z, r1.z, c0.x
                mov r1.w, c8.x
                mad r1.z, r1.z, r1.w, c1.x
                mad r1.z, r1.z, c8.y, c8.z
                frc r1.z, r1.z
                mad r1.z, r1.z, c9.x, c9.y
                sincos r2.y, r1.z, c14, c15
                mad r1.z, r2.y, c8.z, c8.z
                add r1.w, r0.y, r0.x
                add r1.w, r0.z, r1.w
                mul r2.x, r1.w, c8.w
                mad r1.z, r1.z, c10.x, r2.x
                mad r1.xy, t0, r1, -c6
                mul r1.xy, r1, c10.y
                mad r2.y, r1.y, c2.y, r1.z
                mov r3.w, c2.x
                mad r2.x, r1.x, r3.w, c3.x
                texld r2, r2, s1
                mul r1.x, r1.w, c10.z
                mad r1.y, r1.w, c9.z, c9.w
                mul r1.yzw, r1.y, c5.wzyx
                mul r1.yzw, r1, v0.wzyx
                mad r1.x, r2.x, c10.w, r1.x
                add r2.x, r1.x, c11.x
                add r1.x, r1.x, c12.x
                mul_sat r1.x, r1.x, c12.y
                mul_sat r2.x, r2.x, c11.y
                mad r2.y, r2.x, c11.z, c11.w
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.y, r2.x
                mul r2.yzw, v0.wzyx, c12.z
                mad r2.yzw, v0.w, c12.w, r2
                mad r2.yzw, c4.wzyx, r2, -r1
                mad r1.yzw, r2.x, r2, r1
                mul r2.xyz, v0, c8.z
                mad r2.xyz, v0.w, c8.z, r2
                mul r3.xyz, r0, r2
                mul r3.xyz, r3, -c11.x
                mad r1.yzw, r1, c13.x, r3.wzyx
                mad r0.xyz, r0, r2, -r1.wzyx
                mad r2.x, r1.x, c11.z, c11.w
                mul r1.x, r1.x, r1.x
                mul r1.x, r2.x, r1.x
                mad r1.xyz, r1.x, r0, r1.wzyx
                mov r1.w, v0.w
                mul r0, r0.w, r1
                mov oC0, r0
            
            // approximately 57 instruction slots used (2 texture, 55 arithmetic)
            };
    }
    pass ArmorHallowBoss
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //
            
                preshader
                mul c0.x, c0.x, (0.5)
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //   uImage1      s1       1
            //
            
                ps_2_0
                def c1, 0.5, 0.800000012, 0.200000003, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r1.x, r2.w, r2.x
                mov r2.x, c1.x
                mad r1.x, r1.x, r2.x, c0.x
                abs r1.y, r1.x
                frc r1.y, r1.y
                cmp r1.x, r1.x, r1.y, -r1.y
                mov r1.y, c1.x
                texld r1, r1, s1
                mul r1, r1, c1.y
                mad r1, r0, c1.z, r1
                mul r1, r1, v0
                mul r0, r0.w, r1
                mov oC0, r0
            
            // approximately 18 instruction slots used (2 texture, 16 arithmetic)
            };
    }
    pass ArmorMirage
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //   uImageSize0  c2       1
            //
            
                preshader
                rcp r0.x, c2.x
                add c2.x, r0.x, r0.x
                rcp c0.x, c1.w
                mul c1.x, c0.x, (5)
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c3       1
            //   uImageSize0  c4       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c5, -0.5, 30, 0.159154937, 0.5
                def c6, 6.28318548, -3.14159274, 0, 1
                def c7, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c8, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                mov r0.w, c4.y
                mad r0.x, t0.y, r0.w, -c3.y
                mov r1.xy, c5
                mad r0.x, r0.x, c0.x, r1.x
                mad r0.x, r0.x, r1.y, c1.x
                mad r0.x, r0.x, c5.z, c5.w
                frc r0.x, r0.x
                mad r0.x, r0.x, c6.x, c6.y
                sincos r1.y, r0.x, c7, c8
                mul r0.x, r1.y, c2.x
                mov r1.x, -r0.x
                mov r1.y, c6.z
                add r1.xy, r1, t0
                mov r0.y, c6.z
                add r0.xy, r0, t0
                texld r1, r1, s0
                texld r0, r0, s0
                texld r2, t0, s0
                mov r0.x, r1.x
                mov r0.w, c6.w
                mov r0.y, r2.y
                mul r0, r2.w, r0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 31 instruction slots used (3 texture, 28 arithmetic)
            };
    }
    pass ArmorMidnightRainbow
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //   uImageSize0  c2       1
            //
            
                preshader
                rcp c2.x, c1.z
                mul c3.x, c0.x, (0.4)
                rcp r0.x, c2.x
                rcp r0.y, c2.y
                add r1.xy, r0.xy, r0.xy
                mov c0.x, r1.y
                mov c1.x, r1.x
            
            // approximately 7 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSourceRect  c4       1
            //   uImageSize0  c5       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c6, 0, 0.333333343, 4, 0.400000006
                def c7, -2, 3, 0.0666666701, -1
                def c8, 0, 0.666000009, 0.333000004, 0.899999976
                dcl v0
                dcl t0.xy
                dcl_2d s0
                mov r0.x, -c1.x
                mov r0.y, c6.x
                add r0.xy, r0, t0
                mov r1.x, t0.x
                add r1.y, t0.y, -c0.x
                mov r2.x, t0.x
                add r2.y, t0.y, c0.x
                add r3.x, t0.x, c1.x
                mov r3.y, t0.y
                texld r0, r0, s0
                texld r4, t0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                add r0.xyz, r0, -r4
                add r1.w, r0.y, r0.x
                add r1.w, r0.z, r1.w
                add r0.xyz, -r4, r1
                add r2.w, r0.y, r0.x
                add r2.w, r0.z, r2.w
                mul r2.w, r2.w, c6.y
                mad r2.w, r1.w, c6.y, r2.w
                add r0.xyz, -r4, r2
                add r3.w, r0.y, r0.x
                add r3.w, r0.z, r3.w
                mad r3.w, r3.w, c6.y, r2.w
                add r0.xyz, -r4, r3
                add r0.x, r0.y, r0.x
                add r0.x, r0.z, r0.x
                mad r0.x, r0.x, c6.y, r3.w
                add r0.y, r4.y, r4.x
                add r0.y, r4.z, r0.y
                mul r0.z, r0.y, c6.y
                mul r0.x, r0.x, r0.z
                mul r0.x, r0.x, c6.z
                mov r1.x, c5.x
                mad r0.z, t0.x, r1.x, -c4.x
                mul_sat r0.z, r0.z, c2.x
                mad r0.w, r0.z, c7.x, c7.y
                mul r0.z, r0.z, r0.z
                mul r0.z, r0.w, r0.z
                mov r0.w, c6.w
                mad r0.z, r0.z, r0.w, c3.x
                mad r0.y, r0.y, c7.z, r0.z
                add r0.yzw, r0.y, c8.wzyx
                abs r1.xyz, r0.wzyx
                frc r1.xyz, r1
                cmp r0.yzw, r0, r1.wzyx, -r1.wzyx
                mad r0.yzw, r0, c7.y, c7.w
                abs r0.yzw, r0
                add r0.yzw, -r0, c8.w
                mul r0.xyz, r0.x, r0.wzyx
                mov r0.w, -c7.w
                mul r0, r4.w, r0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 56 instruction slots used (5 texture, 51 arithmetic)
            };
    }
    pass ArmorColoredAndSilverTrimGradient
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uSaturation;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c0       1
            //   uSecondaryColor c1       1
            //   uSaturation     c2       1
            //   uSourceRect     c3       1
            //
            
                preshader
                rcp c0.x, c3.z
                neg r0.xyz, c0.xyz
                add c1.xyz, r0.xyz, c1.xyz
                neg r0.x, c2.x
                add r1.x, r0.x, (1)
                rcp r0.x, c2.x
                cmp r2.x, r1.x, (1), r0.x
                neg r0.x, r2.x
                mov c2.x, r2.x
                add c3.x, r0.x, (1)
            
            // approximately 10 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float uSaturation;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c4       1
            //   uSaturation  c5       1
            //   uSourceRect  c6       1
            //   uImageSize0  c7       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c8, -2, 3, 1.79999995, -0.400000006
                def c9, 0.5, 1.5, 1, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r1.x, r2.w, r2.x
                add r1.y, r2.w, -r2.x
                mul r1.y, r1.y, c5.x
                mov r2.x, c2.x
                mad r1.y, r1.y, r2.x, c3.x
                mul r1.x, r1.x, c9.x
                mul r1.x, r1.y, r1.x
                mul r1.x, r0.w, r1.x
                mov r2.x, c7.x
                mad r1.z, t0.x, r2.x, -c6.x
                mul_sat r1.z, r1.z, c0.x
                mad r1.w, r1.z, c8.x, c8.y
                mul r1.z, r1.z, r1.z
                mul r1.z, r1.w, r1.z
                mad r1.z, r1.z, c8.z, c8.w
                mov r2.xyz, c1
                mad r2.xyz, r1.z, r2, c4
                mul r2.xyz, r0, r2
                mad r3.xyz, r1.x, c9.y, -r2
                mad r0.xyz, r1.y, r3, r2
                min r1, r0, c9.z
                mul r0, r1, v0
                mov oC0, r0
            
            // approximately 28 instruction slots used (1 texture, 27 arithmetic)
            };
    }
    pass ArmorPolarized
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c0, 0.333333343, 0.600000024, 0.166666672, 0.5
                def c1, 1, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r0.x, r0.y, r0.x
                add r0.x, r0.z, r0.x
                mad r0.y, r0.x, -c0.x, c0.y
                mul r0.z, r0.x, c0.z
                mad r0.x, r0.x, c0.z, c0.w
                cmp r1.xyz, r0.y, r0.z, r0.x
                mov r1.w, c1.x
                mul r0, r0.w, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 11 instruction slots used (1 texture, 10 arithmetic)
            };
    }
    pass ArmorGel
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float2 uImageSize0;
            //   float uRotation;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c0       1
            //   uSecondaryColor c1       1
            //   uRotation       c2       1
            //   uTime           c3       1
            //   uSourceRect     c4       1
            //   uImageSize0     c5       1
            //
            
                preshader
                rcp r0.x, c5.x
                rcp r0.y, c5.y
                mul c6.xy, r0.xy, c4.xy
                add r1.xy, r0.xy, r0.xy
                mul c0.xy, (0.5, 0.5), c4.zw
                mul c3.x, c3.x, (0.025)
                neg r0.x, c2.x
                add r1.z, r0.x, (-1.57075)
                mul r0.x, r1.z, (0.159154943)
                add r1.z, r0.x, (0.5)
                frc r0.x, r1.z
                mul r1.z, r0.x, (6.28318531)
                add r0.x, r1.z, (-3.14159265)
                cos r2.x, r0.x
                sin r2.y, r0.x
                mul r0.xy, r1.xy, r2.xy
                mov c4.x, r1.x
                mul c5.xy, (3.5, 3.5), r0.xy
                add c7.xy, r0.xy, r0.xy
                mov c8.xy, r0.xy
                neg r0.xyz, c1.xyz
                add c9.xyz, r0.xyz, c0.xyz
                mul r0.x, c2.x, (0.159154943)
                add r1.x, r0.x, (0.5)
                frc r0.x, r1.x
                mul r1.x, r0.x, (6.28318531)
                add r0.x, r1.x, (-3.14159265)
                cos r1.x, r0.x
                sin r1.y, r0.x
                mov c1.x, r1.x
                mov c2.x, r1.y
            
            // approximately 31 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float2 uImageSize0;
            //   float3 uSecondaryColor;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c10      1
            //   uSecondaryColor c11      1
            //   uSourceRect     c12      1
            //   uImageSize0     c13      1
            //   uImage0         s0       1
            //   uImage1         s1       1
            //
            
                ps_2_0
                def c14, -0, 0.00249999994, 0.333333343, 4
                def c15, 0.5, 0.25, 1.5, 2
                def c16, 10, -2, 3, 0.75
                def c17, -0.449999988, 1, 0.699999988, -0.200000003
                def c18, 0.1875, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                add r1.xy, t0, c5
                max r2.xy, c6, r1
                add r1.xy, t0, c7
                max r3.xy, c6, r1
                add r1.xy, t0, c8
                max r4.xy, c6, r1
                mov r1.xy, c13
                mad r1.xy, t0, r1, -c12
                add r1.xy, r1, -c0
                mul r1.z, r1.y, c2.x
                mad r5.x, r1.x, c1.x, -r1.z
                mul r1.y, r1.y, c1.x
                mad r5.y, r1.x, c2.x, r1.y
                add r1.xy, r5, c0
                mov r5.x, c14.x
                mov r5.y, -c3.x
                mad r1.xy, r1, c14.y, r5
                mov r5.y, -c14.x
                add r1.z, r0.y, r0.x
                add r1.z, r0.z, r1.z
                mul r1.w, r1.z, c14.z
                mul r2.z, r1.w, c4.x
                mul r5.x, r2.z, c14.w
                add r1.xy, r1, r5
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, r4, s0
                texld r5, r1, s1
                max r1.x, r4.w, r0.w
                max r2.x, r3.w, r1.x
                max r1.y, r2.x, r3.w
                max r3.x, r2.w, r1.y
                mul r1.y, r1.y, c15.x
                mad r1.y, r3.x, c15.y, r1.y
                max r2.x, r0.w, r3.x
                mad r1.y, r3.w, c15.z, r1.y
                mad r1.x, r1.x, c15.w, r1.y
                mul r0.xyz, r1.w, c10
                mul r1.x, r5.x, r1.x
                mad r1.y, r1.x, c15.x, r0.w
                mul r1.x, r1.x, c15.x
                mad r1.x, r0.w, c15.x, r1.x
                add r1.x, r1.x, c17.w
                mul_sat r1.x, r1.x, c16.x
                add r1.y, r1.y, c17.x
                cmp r1.y, r1.y, c17.y, c17.z
                mul r1.y, r5.x, r1.y
                mov r3.xyz, c9
                mad r3.xyz, r1.y, r3, c11
                mad r1.y, r1.x, c16.y, c16.z
                mul r1.x, r1.x, r1.x
                mul r1.x, r1.y, r1.x
                mov r3.w, c17.y
                mul r3, r3, r1.x
                mul r2, r2.x, r3
                mul r1.x, r2.w, c16.w
                mad r1.x, r1.z, -c18.x, r1.x
                mad r2, r2, c16.w, -r0
                mad r3, r1.x, r2, r0
                mul r0.x, r1.x, r2.w
                cmp r3.w, r0.x, r3.w, r0.w
                mul r0, r3, v0
                mov oC0, r0
            
            // approximately 64 instruction slots used (5 texture, 59 arithmetic)
            };
    }
    pass ArmorFlow
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float3 uSecondaryColor;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uColor          c0       1
            //   uSecondaryColor c1       1
            //
            
                preshader
                neg r0.xyz, c0.xyz
                add c2.xyz, r0.xyz, c1.xyz
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uTime        c1       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, 0.333333343, 4, 0.159154937, 0.5
                def c4, 6.28318548, -3.14159274, 0, 0
                def c5, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c6, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r1.w, r0.y, r0.x
                add r1.x, r0.z, r1.w
                mov r1.y, c3.y
                mad r1.y, r1.x, r1.y, c1.x
                mul r1.x, r1.x, c3.x
                mad r1.y, r1.y, c3.z, c3.w
                frc r1.y, r1.y
                mad r1.y, r1.y, c4.x, c4.y
                sincos r2.y, r1.y, c5, c6
                mad r1.y, r2.y, c3.w, c3.w
                mov r2.xyz, c2
                mad r1.yzw, r1.y, r2.wzyx, c0.wzyx
                mul r0.xyz, r1.x, r1.wzyx
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 23 instruction slots used (1 texture, 22 arithmetic)
            };
    }
    pass ArmorForceField
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uImageSize0  c1       1
            //
            
                preshader
                rcp r0.x, c1.y
                add c1.x, r0.x, r0.x
                mul c0.x, r0.x, (4)
                mul c2.x, c0.x, (10)
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c3       1
            //   uSourceRect  c4       1
            //   uImageSize0  c5       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c6, 0.159154937, 0.5, 6.28318548, -3.14159274
                def c7, 1, 0.333333343, 2.5, 0.166666672
                def c8, 0, 0, 0, 0
                def c9, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c10, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                mov r0.x, t0.x
                add r0.y, t0.y, c1.x
                mov r1.x, t0.x
                add r1.y, t0.y, c0.x
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, t0, s0
                mov r0.xy, c5
                mad r0.xy, t0, r0, -c4
                add r0.z, r0.y, -c2.x
                mad r0.z, r0.z, c6.x, c6.y
                frc r0.z, r0.z
                mad r0.z, r0.z, c6.z, c6.w
                sincos r3.y, r0.z, c9, c10
                mul r0.z, r0.w, r3.y
                add r0.y, r0.y, c2.x
                mad r0.x, r0.x, c6.x, c6.y
                frc r0.x, r0.x
                mad r0.x, r0.x, c6.z, c6.w
                sincos r3.y, r0.x, c9, c10
                mad r0.x, r0.y, c6.x, c6.y
                frc r0.x, r0.x
                mad r0.x, r0.x, c6.z, c6.w
                sincos r4.y, r0.x, c9, c10
                mad r0.x, r3.y, r4.y, r0.z
                min r3.w, r0.x, c7.x
                mul r3.xyz, r3.w, c3
                mul r0, r3, c7.z
                min r3, r0, c7.x
                add r0.x, r2.y, r2.x
                add r0.x, r2.z, r0.x
                mad r0.y, r0.x, -c7.w, r1.w
                mul r0.x, r0.x, c7.y
                mul r1.xyz, r0.x, c3
                mul r3, r3, r0.y
                cmp_sat r0, r0.y, r3, c8.x
                mov r1.w, c7.x
                mul r1, r2.w, r1
                mul r1, r1, v0
                mad r0, r0, c6.y, r1
                mov oC0, r0
            
            // approximately 62 instruction slots used (3 texture, 59 arithmetic)
            };
    }
    pass ArmorLoki
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float uRotation;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uRotation    c0       1
            //   uTime        c1       1
            //   uSourceRect  c2       1
            //   uImageSize0  c3       1
            //
            
                preshader
                add r0.x, c2.w, c2.y
                rcp r0.y, c3.y
                mul r1.x, r0.x, r0.y
                neg r1.y, r0.y
                mov r2.y, r0.y
                add c1.x, r1.x, r1.y
                rcp r2.x, c3.x
                add r0.xy, r2.xy, r2.xy
                neg r0.z, c0.x
                add r1.x, r0.z, (1.57075)
                mul r0.z, r1.x, (0.159154943)
                add r1.x, r0.z, (0.5)
                frc r0.z, r1.x
                mul r1.x, r0.z, (6.28318531)
                add r0.z, r1.x, (-3.14159265)
                cos r1.x, r0.z
                sin r1.y, r0.z
                mul r2.xy, r0.xy, r1.xy
                mul c0.xy, (3, 3), r2.xy
                mov c2.xy, r2.xy
                mul c3.xy, (0.5, 0.5), c2.zw
                mul c6.x, c1.x, (10)
                mul r0.x, c0.x, (0.159154943)
                add r1.x, r0.x, (0.5)
                frc r0.x, r1.x
                mul r1.x, r0.x, (6.28318531)
                add r0.x, r1.x, (-3.14159265)
                cos r1.x, r0.x
                sin r1.y, r0.x
                mov c4.x, r1.x
                mov c5.x, r1.y
            
            // approximately 31 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c7       1
            //   uSourceRect  c8       1
            //   uImageSize0  c9       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c10, 0.159154937, 0.5, 6.28318548, -3.14159274
                def c11, 1, 1.66666663, 0, 0.100000001
                def c12, 2.0999999, 0, 0, 0
                def c13, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c14, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                mov r0.xy, c9
                mad r0.xy, t0, r0, -c8
                add r0.xy, r0, -c3
                mul r0.z, r0.y, c5.x
                mad r1.x, r0.x, c4.x, -r0.z
                mul r0.y, r0.y, c4.x
                mad r1.y, r0.x, c5.x, r0.y
                add r0.xy, r1, c3
                add r0.y, r0.y, c6.x
                mad r0.x, r0.x, c10.x, c10.y
                frc r0.x, r0.x
                mad r0.x, r0.x, c10.z, c10.w
                sincos r1.y, r0.x, c13, c14
                mad r0.x, r0.y, c10.x, c10.y
                frc r0.x, r0.x
                mad r0.x, r0.x, c10.z, c10.w
                sincos r2.y, r0.x, c13, c14
                add r0.xy, t0, c2
                min r3.y, c1.x, r0.y
                mov r3.x, r0.x
                add r0.xy, t0, c0
                min r4.y, c1.x, r0.y
                mov r4.x, r0.x
                texld r0, r3, s0
                texld r3, r4, s0
                texld r4, t0, s0
                mad r0.x, r1.y, r2.y, r0.w
                min r1.w, r0.x, c11.x
                mul r1.xyz, r1.w, c7
                max r2.x, r3.w, r0.w
                add r0.x, r4.y, r4.x
                add r0.x, r4.z, r0.x
                mad r0.x, r0.x, -c11.y, r2.x
                mul r1, r1, r0.x
                cmp r0, r0.x, r1, c11.z
                mad r1.x, r4.w, -c11.w, c11.x
                mul r1, r0, r1.x
                mul r1, r1, c12.x
                cmp r0, r0, r1, c11.z
                add r0, r4, r0
                min r1, r0, c11.x
                max r0.xyz, v0, v0.w
                lrp r2.xyz, c10.y, r0, v0
                mov r2.w, v0.w
                mul r0, r1, r2
                mov oC0, r0
            
            // approximately 60 instruction slots used (3 texture, 57 arithmetic)
            };
    }
    pass ForceField
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //   uImageSize0  c2       1
            //
            
                preshader
                rcp r0.x, c2.x
                rcp r0.y, c2.y
                mul c0.xy, r0.xy, c1.xy
                mul r1.xy, r0.xy, c1.zw
                rcp c1.x, r1.x
                rcp c1.y, r1.y
                mul c2.xy, (0.5, 0.5), r1.xy
                mul c3.x, c0.x, (5)
            
            // approximately 8 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c4       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c5, -0.5, 1.5, 1, 0
                def c6, 2.79999995, -1, 20, 30
                def c7, -0.300000012, 0.75, 0, 0
                def c8, 12.5663681, -6.28318405, 1.99999964, 0.5
                def c9, -2, 3, 0.0795774907, -1.49802815e-006
                def c10, 6.28318548, -3.14159274, -0.5, 0.5
                def c11, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c12, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, -c0
                mov r1.w, c5.x
                mad r0.xy, r0, c1, r1.w
                mov r0.w, c6.w
                mad r0.z, r0.y, r0.w, c3.x
                mul r0.xy, r0, c5.yzxw
                dp2add r0.x, r0, r0, c5.w
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mul r0.y, r0.z, c9.z
                abs r0.y, r0.y
                frc r0.y, r0.y
                cmp r0.y, r0.z, r0.y, -r0.y
                mad r0.z, r0.y, c8.z, c8.w
                mad r0.y, r0.y, c8.x, c8.y
                frc r0.z, r0.z
                mad r0.z, r0.z, c10.x, c10.y
                cmp r0.y, r0.y, c9.w, r0.z
                sincos r1.x, r0.y, c11, c12
                mad r0.y, r1.x, c10.z, c10.w
                mul r0.z, r0.x, c6.x
                mad r0.x, r0.x, c6.x, c6.y
                mul_sat r0.x, r0.x, c6.z
                rsq r0.w, r0.z
                rcp r0.w, r0.w
                add r1.xy, t0, -c2
                mad r1.xy, r1, r0.w, -c5.x
                texld r1, r1, s0
                mad r0.w, r1.x, r0.y, c7.x
                mul_sat r0.w, r0.w, c6.z
                mad r1.y, r0.w, c9.x, c9.y
                mul r0.w, r0.w, r0.w
                mul r0.w, r1.y, r0.w
                rcp r1.y, r1.x
                mul r1.x, r1.x, r1.x
                lrp r2.w, r0.w, r1.y, c5.z
                mul r0.w, r1.x, r2.w
                mad r1.x, r0.x, c9.x, c9.y
                mul r0.x, r0.x, r0.x
                mad r0.x, r1.x, -r0.x, c5.z
                mul r0.y, r0.y, r0.x
                mul r1.w, r0.w, r0.y
                mul r1.xyz, r1.w, c4
                mul r0.y, r0.z, r0.z
                mul r0.x, r0.x, r0.y
                mul r0.w, r0.z, r0.x
                mul r0.xyz, r0.w, c4
                mad r0, r0, c7.y, r1
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 58 instruction slots used (1 texture, 57 arithmetic)
            };
    }
    pass WaterProcessor
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImageSize0  c0       1
            //
            
                preshader
                rcp c1.x, c0.x
                rcp c0.x, c0.y
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c2, -0.0551415533, 0.25, 0.0500000007, 1
                def c3, 2, -1, 3.33333325, -1.66666663
                def c4, 0.300000012, 0.5, 512, 0.001953125
                def c5, 0, 1, -0, -1
                dcl t0.xy
                dcl_2d s0
                mov r0.x, -c1.x
                mov r0.y, c5.z
                add r0.xy, r0, t0
                add r1.x, t0.x, c1.x
                mov r1.y, t0.y
                mov r2.x, c5.z
                mov r2.y, -c0.x
                add r2.xy, r2, t0
                mov r3.x, t0.x
                add r3.y, t0.y, c0.x
                texld r0, r0, s0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, r3, s0
                texld r4, t0, s0
                mad r4.w, r0.x, c3.x, c3.y
                mad r4.w, r1.x, c3.x, r4.w
                mad r0.x, r2.x, c3.x, c3.y
                add r4.w, r4.w, r0.x
                mad r0.x, r3.x, c3.x, c3.y
                add r4.w, r4.w, r0.x
                add r4.w, r4.w, c3.y
                mad r0.x, r4.x, c3.x, c3.y
                mad r0.y, r4.w, c2.y, -r0.x
                add r0.z, -r4.z, -c3.y
                mad r0.w, r4.y, c3.z, c3.w
                mul r0.y, r0.y, r0.z
                add r0.y, r0.y, r0.y
                cmp r1.x, -r0.w, c5.x, c5.y
                cmp r1.y, r0.w, c5.z, c5.w
                mul r0.w, r0.w, r0.w
                add r1.x, r1.x, r1.y
                mad r0.y, r0.w, r1.x, r0.y
                add r0.y, r0.x, r0.y
                mul r0.w, r0.z, c2.x
                add r0.z, -r0.z, -c3.y
                mad r0.z, r0.z, -c2.z, c2.w
                exp r0.w, r0.w
                mad r0.x, r0.y, r0.w, -r0.x
                mul r0.y, r0.y, r0.w
                mad r0.y, r0.y, c4.y, c4.y
                mad r0.y, r0.y, c4.z, c4.y
                mul r0.x, r0.z, r0.x
                cmp r0.z, -r0.x, c5.x, c5.y
                cmp r0.w, r0.x, c5.z, c5.w
                abs r0.x, r0.x
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                add r0.z, r0.z, r0.w
                mul r0.x, r0.x, r0.z
                mad r1.y, r0.x, c4.x, c4.y
                frc r0.x, r0.y
                add r0.x, r0.y, -r0.x
                mul r1.x, r0.x, c4.w
                mov r1.zw, -c5
                mov oC0, r1
            
            // approximately 56 instruction slots used (5 texture, 51 arithmetic)
            };
    }
    pass WaterDistortionObject
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
                ps_2_0
                def c0, -0.5, 0, -0.200000003, 25.1200008
                def c1, 6.28000021, -12.5600004, 0.159154937, 0.5
                def c2, 6.28318548, -3.14159274, -0.00637111347, 0
                def c3, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c4, -0.020833334, -0.125, 1, 0.5
                dcl v0.xyz
                dcl t0.xy
                add r0.xy, v0, c0.x
                dp2add r0.z, r0, r0, c0.y
                rsq r0.z, r0.z
                mul r0.xy, r0, r0.z
                add r1.xy, t0, c0.x
                dp2add r0.z, r1, r1, c0.y
                rsq r0.z, r0.z
                mul r1.xy, r1, r0.z
                rcp r0.z, r0.z
                mul r0.z, r0.z, c0.w
                max r1.z, r0.z, c1.x
                dp2add r0.x, -r0, r1, c0.z
                max r1.x, r0.x, c0.y
                mad r0.x, r1.z, c1.z, c1.w
                add r0.y, r1.z, c1.y
                frc r0.x, r0.x
                mad r0.x, r0.x, c2.x, c2.y
                cmp r0.x, r0.y, c2.z, r0.x
                sincos r2.x, r0.x, c3, c4
                cmp r0.x, r2.x, c0.y, -r2.x
                mul r0.x, r1.x, r0.x
                mul r0.xw, r0.x, v0.z
                mov r0.yz, c0.y
                mov oC0, r0
            
            // approximately 34 instruction slots used
            };
    }
    pass HallowBoss
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uImage0      s0       1
            //   uImage1      s1       1
            //
            
                ps_2_0
                def c1, 0.5, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                add r0.x, r0.x, c0.x
                abs r0.y, r0.x
                frc r0.y, r0.y
                cmp r0.x, r0.x, r0.y, -r0.y
                mov r0.y, c1.x
                texld r1, r0, s1
                mul r1, r1, v0
                mul r0, r0.w, r1
                mov oC0, r0
            
            // approximately 10 instruction slots used (2 texture, 8 arithmetic)
            };
    }
    pass TitaniumStorm
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uTime        c1       1
            //
            
                preshader
                mul c0.x, c0.x, c1.x
                neg r0.x, c0.z
                add c1.x, r0.x, (1)
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float uOpacity;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c2       1
            //   uOpacity     c3       1
            //   uImage0      s0       1
            //   uImage1      s1       1
            //
            
                ps_2_0
                def c4, 0.5, 0, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                mad r1.w, r0.x, c2.y, t0.x
                add r1.x, r1.w, c0.x
                add r1.x, r1.x, c3.x
                abs r1.y, r1.x
                frc r1.y, r1.y
                cmp r1.x, r1.x, r1.y, -r1.y
                mov r1.y, c4.x
                texld r1, r1, s1
                mul r2, r0, c1.x
                mad r1, r1, c2.z, r2
                mul r1, r1, v0
                mul r0, r0.w, r1
                mov oC0, r0
            
            // approximately 14 instruction slots used (2 texture, 12 arithmetic)
            };
    }
    pass QueenSlime
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //
            
                preshader
                rcp c0.x, c1.z
                rcp c1.x, c1.w
                mul r0.x, c0.x, (0.159154943)
                add r1.x, r0.x, (0.5)
                frc r0.x, r1.x
                mul r1.x, r0.x, (6.28318531)
                add r0.x, r1.x, (-3.14159265)
                cos r1.x, r0.x
                sin r1.y, r0.x
                mul r0.x, r1.x, (0.5)
                mul r0.y, r1.y, (0.3)
                mul r0.z, c0.x, (0.2)
                add c4.x, r0.x, r0.z
                add r1.x, r0.y, r0.z
                neg r0.x, r1.x
                add c3.x, r0.x, (1)
            
            // approximately 16 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   sampler2D uImage2;
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c5       1
            //   uSourceRect  c6       1
            //   uImageSize0  c7       1
            //   uImage0      s0       1
            //   uImage1      s1       1
            //   uImage2      s2       1
            //
            
                ps_2_0
                def c8, 1, -1, 0, 0
                def c9, 0.400000006, 0.300000012, 0.200000003, 1
                def c10, -2, 3, 0.241915509, 0.5
                def c11, 6.28318548, -3.14159274, 0.377197206, 0.5
                def c12, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c13, -0.020833334, -0.125, 1, 0.5
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                mov r0.xy, c7
                mad r0.y, t0.y, r0.y, -c6.y
                mul_sat r0.y, r0.y, c1.x
                mad r0.z, r0.y, c10.x, c10.y
                mul r0.y, r0.y, r0.y
                mul r0.w, r0.z, r0.y
                mad r0.w, r0.w, c11.z, c11.w
                frc r0.w, r0.w
                mad r0.w, r0.w, c11.x, c11.y
                sincos r1.y, r0.w, c12, c13
                mov r2.xy, c9
                mad r0.w, r1.y, r2.x, c3.x
                mad r1.y, r0.z, r0.y, r0.w
                mad r0.x, t0.x, r0.x, -c6.x
                mul_sat r0.x, r0.x, c0.x
                mad r0.y, r0.x, c10.x, c10.y
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.y, r0.x
                mad r0.z, r0.x, c10.z, c10.w
                frc r0.z, r0.z
                mad r0.z, r0.z, c11.x, c11.y
                sincos r3.x, r0.z, c12, c13
                mad r1.x, r3.x, r2.y, c4.x
                mov r0.y, c9.z
                add r0.xy, r1, r0
                mul r0.xy, r0, c10.w
                texld r0, r0, s2
                texld r1, t0, s0
                add r0.y, r1.x, c5.x
                add r0.x, -r0.x, r0.y
                add r0.x, r0.x, c9.w
                cmp r0.y, r0.x, c8.x, c8.y
                mul r0.x, r0.x, r0.y
                frc r0.x, r0.x
                mul r0.x, r0.y, r0.x
                mov r0.y, c8.z
                texld r0, r0, s1
                mov r2.w, c9.w
                mov r2.xyz, r1.x
                add r3.xyz, r0, -r2.z
                add r3.w, r0.w, -r2.w
                mad r0, r1.y, r3, r2
                mul r0.w, r1.w, r0.w
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 59 instruction slots used (3 texture, 56 arithmetic)
            };
    }
    pass MagicMissile
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uSaturation;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uSaturation  c0       1
            //   uTime        c1       1
            //
            
                preshader
                mul c1.x, c0.x, c1.x
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   sampler2D uImage2;
            //   float uOpacity;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uOpacity     c0       1
            //   uImage0      s0       1
            //   uImage1      s1       1
            //   uImage2      s2       1
            //
            
                ps_2_0
                def c2, 1.5, -0.5, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                mad r0.w, t0.x, c2.x, c2.y
                add r0.x, t0.x, c1.x
                mov r0.y, t0.y
                texld r1, r0, s2
                texld r2, r0, s1
                texld r3, t0, s0
                add r0.x, -r0.w, r1.x
                add_sat r0.x, r0.x, r0.x
                mul r0.x, r2.x, r0.x
                mul r0, r3, r0.x
                mul r0, r0, v0
                mul r0, r0, c0.x
                mov oC0, r0
            
            // approximately 13 instruction slots used (3 texture, 10 arithmetic)
            };
    }
    pass FinalFractal
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uSecondaryColor;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uSecondaryColor c0       1
            //
            
                preshader
                neg r0.x, c0.y
                add r1.x, r0.x, (0.5)
                rcp c1.x, r1.x
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float3 uSecondaryColor;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uSecondaryColor c0       1
            //   uImage0         s0       1
            //
            
                ps_2_0
                def c2, -0.5, 0, 0.0208350997, -0.0851330012
                def c3, 0.180141002, -0.330299497, 0.999866009, 1
                def c4, 0, 1, -2, 1.57079637
                def c5, -0, -3.14159274, 0.318309963, 1
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c2.x
                abs r0.z, r0.y
                abs r0.w, r0.x
                max r1.w, r0.z, r0.w
                rcp r1.x, r1.w
                min r1.y, r0.w, r0.z
                add r0.z, -r0.z, r0.w
                cmp r0.z, r0.z, c4.x, c4.y
                mul r0.w, r1.x, r1.y
                mul r1.x, r0.w, r0.w
                mad r1.y, r1.x, c2.z, c2.w
                mad r1.y, r1.x, r1.y, c3.x
                mad r1.y, r1.x, r1.y, c3.y
                mad r1.x, r1.x, r1.y, c3.z
                mul r0.w, r0.w, r1.x
                mad r1.x, r0.w, c4.z, c4.w
                mad r0.z, r1.x, r0.z, r0.w
                cmp r0.w, r0.x, c5.x, c5.y
                add r0.z, r0.z, r0.w
                add r0.w, r0.z, r0.z
                max r1.x, r0.y, r0.x
                cmp r1.x, r1.x, c4.y, c4.x
                min r1.y, r0.x, r0.y
                dp2add r0.x, r0, r0, c2.y
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                add r0.x, r0.x, -c0.y
                mov r1.w, c3.w
                mad r0.x, r0.x, -c1.x, r1.w
                cmp r0.y, r1.y, c2.y, r1.x
                mad r0.y, r0.y, -r0.w, r0.z
                mad r0.y, r0.y, c5.z, c5.w
                mul r0.y, r0.y, c0.x
                mov r1.x, c2.x
                mad r0.y, r0.y, -r1.x, c0.z
                abs r0.z, r0.y
                frc r0.z, r0.z
                cmp r1.x, r0.y, r0.z, -r0.z
                mov r1.y, r0.x
                texld r2, r1, s0
                add r0.x, -r0.x, c3.w
                cmp r0.y, r1.y, c4.x, c4.y
                cmp r0.x, r0.x, c4.x, c4.y
                add r0.x, r0.y, r0.x
                cmp r0, -r0.x, r2, c2.y
                mov oC0, r0
            
            // approximately 47 instruction slots used (1 texture, 46 arithmetic)
            };
    }
    pass FinalFractalVertex
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float4 uShaderSpecificData;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   uShaderSpecificData c0       1
            //
            
                preshader
                rcp c2.x, c0.w
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float uOpacity;
            //   float4 uShaderSpecificData;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   uOpacity            c0       1
            //   uShaderSpecificData c1       1
            //   uImage0             s0       1
            //   uImage1             s1       1
            //
            
                ps_2_0
                def c3, 1.5, -0.5, 1, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mad r0.w, t0.x, c3.x, c3.y
                mad r0.x, t0.x, c1.x, c1.y
                abs r0.y, r0.x
                frc r0.y, r0.y
                cmp r1.x, r0.x, r0.y, -r0.y
                mov r0.z, c3.z
                mad r0.x, r0.x, -c2.x, r0.z
                mov r1.y, t0.y
                texld r2, r1, s1
                texld r1, r1, s0
                mul r1, r1.x, v0
                mul r1, r1, c0.x
                add r0.y, -r0.w, r2.x
                add_sat r0.y, r0.y, r0.y
                mul r1, r1, r0.y
                mul r0, r0.x, r1
                mov oC0, r0
            
            // approximately 17 instruction slots used (2 texture, 15 arithmetic)
            };
    }
    pass MaskedFade
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float4 uShaderSpecificData;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   uShaderSpecificData c0       1
            //   uImage0             s0       1
            //   uImage1             s1       1
            //
            
                ps_2_0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mov r0.x, t0.x
                mad r0.y, t0.y, c0.x, c0.y
                add r1.x, t0.x, c0.z
                add r1.y, t0.y, c0.w
                texld r0, r0, s1
                texld r1, r1, s0
                mul r1, r1, v0
                mul r0, r0.w, r1
                mov oC0, r0
            
            // approximately 9 instruction slots used (2 texture, 7 arithmetic)
            };
    }
    pass RainbowTownSlime
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize0;
            //   float4 uSourceRect;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uSourceRect  c1       1
            //   uImageSize0  c2       1
            //
            
                preshader
                rcp r0.x, c2.x
                rcp r0.y, c2.y
                mul c0.xy, r0.xy, c1.xy
                mul r1.xy, r0.xy, c1.zw
                rcp c1.x, r1.x
                rcp c1.y, r1.y
                mul c2.x, c0.x, (0.16)
            
            // approximately 7 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, -0.5, 0.330000013, 1, -1
                def c4, 3.33333325, 6, -3, -2
                def c5, 6, -4, 0.649999976, 0.25
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r1.xy, t0, -c0
                mov r2.w, c3.x
                mad r1.xy, r1, c1, r2.w
                mul r1.y, r1.y, c3.y
                mad r1.x, r1.x, c3.y, r1.y
                add r1.x, r1.x, c2.x
                cmp r1.y, r1.x, c3.z, c3.w
                mul r1.x, r1.x, r1.y
                frc r1.x, r1.x
                mad r1.x, r1.y, -r1.x, c3.z
                mad r1.y, r1.x, c4.y, c4.z
                abs r1.y, r1.y
                add_sat r2.x, r1.y, c3.w
                mad r1.y, r1.x, c4.y, c4.w
                mad r1.x, r1.x, c5.x, c5.y
                abs r1.x, r1.x
                add_sat r2.z, -r1.x, -c4.w
                abs r1.x, r1.y
                add_sat r2.y, -r1.x, -c4.w
                mov r2.w, c3.z
                lrp r1, c5.z, r0, r2
                mad r1, r0, c5.w, r1
                mul_sat r2.x, r0.x, c4.x
                lrp r3, r2.x, r1, r0
                mul r1, r3, v0
                mul r0, r0.w, r1
                mov oC0, r0
            
            // approximately 28 instruction slots used (1 texture, 27 arithmetic)
            };
    }
}

