
//listing of all techniques and passes with embedded asm listings 

technique Technique1
{
    pass Default
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mul r0, r0, v0
                mov oC0, r0
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
    pass OverlayGlow
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uScreenResolution;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c0       1
            //
            
                preshader
                mul r0.xy, (0.5, 0.5), c0.xy
                add c3.xy, (-200, -200), r0.xy
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uOpacity;
            //   float2 uScreenResolution;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uColor            c0       1
            //   uScreenResolution c1       1
            //   uOpacity          c2       1
            //
            
                ps_2_0
                def c4, 0, 500, 0.00200000009, 0
                dcl t0.xy
                mov r0.xy, c1
                mad r0.xy, r0, t0, -c3
                dp2add r0.x, r0, r0, c4.x
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                add r0.x, -r0.x, c4.y
                mul r0.y, r0.x, c4.z
                cmp r0.x, r0.x, r0.y, c4.x
                mul r0.yzw, r0.x, c0.wzyx
                mul r1.w, r0.x, c2.x
                mul r1.xyz, r0.wzyx, c2.x
                mov oC0, r1
            
            // approximately 13 instruction slots used
            };
    }
    pass FilterColor
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //
            
                preshader
                neg r0.xyz, c0.xyz
                add c2.xyz, (1, 1, 1), r0.xyz
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uOpacity;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uOpacity     c1       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, 0.5, -0.5, -1, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r1.x, r2.w, r2.x
                add r1.y, r1.x, c3.z
                mov r2.xyz, c0
                mad r1.yzw, r1.y, c2.wzyx, r2.wzyx
                mad r2.x, r1.x, c3.x, c3.y
                mul r2.yzw, r1.x, c0.wzyx
                cmp r1.xyz, r2.x, r1.wzyx, r2.wzyx
                lrp r2.xyz, c1.x, r1, r0
                mov r2.w, r0.w
                mov oC0, r2
            
            // approximately 15 instruction slots used (1 texture, 14 arithmetic)
            };
    }
    pass FilterInvert
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float uOpacity;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uOpacity     c0       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c1, -1, -1, -1, 1
                def c2, 1, 1, 1, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1, c1
                mad r1, r0, r1, c2
                lrp r2, c0.x, r1, r0
                mov oC0, r2
            
            // approximately 5 instruction slots used (1 texture, 4 arithmetic)
            };
    }
    pass FilterMoonLord
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //
            
                preshader
                mul r0.x, c0.x, (3.18309886)
                add r1.x, r0.x, (0.5)
                frc r0.x, r1.x
                mul r1.x, r0.x, (6.28318531)
                add r0.x, r1.x, (-3.14159265)
                sin r1.y, r0.x
                mul c4.x, r1.y, (0.01)
            
            // approximately 7 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float uOpacity;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c0       1
            //   uScreenPosition   c1       1
            //   uTargetPosition   c2       1
            //   uOpacity          c3       1
            //   uImage0           s0       1
            //
            
                ps_2_0
                def c5, 0, 0.000500000024, 1, 0.150000006
                def c6, 0.699999988, 0.300000012, 3, 0.5
                def c7, -2, 3, 0, 0
                def c8, 0.479999989, -4000, 0.000250000012, 0
                def c9, 0.000500000024, -0.400000006, 0.000650000002, 1
                dcl t0.xy
                dcl_2d s0
                mov r0.xy, c0
                mad r0.xy, r0, t0, c1
                add r0.xy, -r0, c2
                dp2add r0.x, r0, r0, c5.x
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mul r0.y, r0.x, c5.y
                min r1.w, r0.y, c5.z
                mul r1.x, r1.w, c4.x
                mov r1.y, c5.x
                add r2.xy, -r1, t0
                add r1.xy, r1, t0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, t0, s0
                mul r0.yzw, r1.wzyx, c5.w
                mad r0.yzw, r3.wzyx, c6.x, r0
                mad r0.yzw, r2.wzyx, c5.w, r0
                add r1.xyz, r0.wzyx, c6.y
                mul r1.w, r0.y, c6.z
                mul r0.yzw, r1.wzyx, r1.w
                mul r0.yzw, r0, c6.w
                mad r1.x, r0.x, c9.x, c9.y
                mad r1.y, r0.x, -c9.z, c9.w
                add r0.x, r0.x, c8.y
                mul_sat r0.x, r0.x, c8.z
                cmp r1.x, r1.x, c8.x, r1.y
                mad r1.yzw, r0, -r1.x, r3.wzyx
                mul r0.yzw, r0, r1.x
                mad r1.x, r0.x, c7.x, c7.y
                mul r0.x, r0.x, r0.x
                mul r0.x, r1.x, r0.x
                mad r0.xyz, r0.x, r1.wzyx, r0.wzyx
                mad r0.xyz, r0, r3.w, -r3
                mad r3.xyz, c3.x, r0, r3
                mov oC0, r3
            
            // approximately 37 instruction slots used (3 texture, 34 arithmetic)
            };
    }
    pass FilterGraveyard
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float uIntensity;
            //   float uOpacity;
            //   float uProgress;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uOpacity     c0       1
            //   uIntensity   c1       1
            //   uProgress    c2       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, 0.333333343, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r1.w, r0.y, r0.x
                add r1.x, r0.z, r1.w
                mul r1.x, r1.x, c1.x
                mad r1.xyz, r1.x, c3.x, -r0
                mad r1.xyz, c2.x, r1, r0
                mad r1.xyz, r1, r0.w, -r0
                mad r0.xyz, c0.x, r1, r0
                mov oC0, r0
            
            // approximately 9 instruction slots used (1 texture, 8 arithmetic)
            };
    }
    pass FilterSepia
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize1;
            //   float uProgress;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uProgress    c0       1
            //   uImageSize1  c1       1
            //
            
                preshader
                rcp c0.x, c1.x
                rcp c0.y, c1.y
                rcp c1.x, c0.x
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float uIntensity;
            //   float uOpacity;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uColor            c2       1
            //   uScreenResolution c3       1
            //   uScreenPosition   c4       1
            //   uTargetPosition   c5       1
            //   uOpacity          c6       1
            //   uIntensity        c7       1
            //   uImage0           s0       1
            //   uImage1           s1       1
            //
            
                ps_2_0
                def c8, 0.333333343, 0.962250471, 0.192450091, 0.192450091
                def c9, 2, -1, 0.200000003, 4
                def c10, 0.5, -0.5, 1.10000002, 1
                def c11, 1.20000005, 0.899999976, 1, 0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mul r0.xy, t0, c3
                mov r1.w, c9.x
                mad r0.xy, r0, r1.w, c4
                mov r1.xy, c0
                mad r0.xy, r0, r1, c5
                texld r0, r0, s1
                texld r1, t0, s0
                mul r0.xyz, r0, r0
                nrm r2.xyz, r1
                dp3 r0.w, r2, c8.wzyx
                mad_sat r0.w, r0.w, c9.x, c9.y
                mul r0.w, r0.w, c9.z
                add r2.x, r1.y, r1.x
                add r2.x, r1.z, r2.x
                mad r2.yzw, r2.x, c8.x, -r1.wzyx
                mad r2.yzw, r0.w, r2, r1.wzyx
                mad r3.xyz, r2.x, c8.x, -r2.wzyx
                min r0.w, r1.z, r1.y
                min r3.w, r0.w, r1.x
                max r0.w, r1.y, r1.z
                max r4.w, r1.x, r0.w
                add r0.w, -r3.w, r4.w
                mad r3.w, r4.w, -c11.y, c11.z
                mul_sat r0.w, r0.w, c9.w
                add r0.w, -r0.w, -c9.y
                mad r2.yzw, r0.w, r3.wzyx, r2
                mov r0.w, c8.x
                mad r3.xyz, r2.x, r0.w, c2
                mul r0.w, r2.x, c8.x
                mul_sat r0.w, r0.w, c1.x
                add r0.w, -r0.w, -c9.y
                mad r0.w, r0.w, -r0.w, -c9.y
                mul r0.w, r0.w, r0.w
                lrp r4.xyz, c10.x, r3, r2.wzyx
                mad r0.xyz, r0, r4, -r4
                add r2.xy, t0, c10.y
                mul r4.w, r2.y, r2.y
                mad r4.w, r2.x, r2.x, r4.w
                rsq r4.w, r4.w
                rcp r4.w, r4.w
                mad r4.w, r4.w, -c10.z, c10.w
                add r2.x, -r4.w, -c9.y
                mul r2.x, r2.x, r2.x
                mul r2.x, r2.x, c11.x
                mul r2.x, r3.w, r2.x
                mad r0.xyz, r2.x, r0, r4
                mul r0.xyz, r0.w, r0
                mul r0.xyz, r4.w, r0
                mul r0.xyz, r0, c7.x
                mad r0.xyz, r0, r1.w, -r1
                mad r1.xyz, c6.x, r0, r1
                mov oC0, r1
            
            // approximately 54 instruction slots used (2 texture, 52 arithmetic)
            };
    }
    pass FilterTower
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uProgress;
            //   float2 uScreenResolution;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uColor            c0       1
            //   uScreenResolution c1       1
            //   uTime             c2       1
            //   uProgress         c3       1
            //
            
                preshader
                mul r0.x, c3.x, (1000)
                add c0.x, r0.x, (180)
                neg r0.x, c3.x
                add c1.x, r0.x, (1)
                mul c2.x, c2.x, (-5)
                rcp c3.x, c1.x
                rcp c3.y, c1.y
                neg r0.xyz, c0.xyz
                add c4.xyz, (1, 1, 1), r0.xyz
            
            // approximately 9 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uIntensity;
            //   float uOpacity;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uColor            c5       1
            //   uScreenResolution c6       1
            //   uScreenPosition   c7       1
            //   uTargetPosition   c8       1
            //   uOpacity          c9       1
            //   uIntensity        c10      1
            //   uImage0           s0       1
            //
            
                ps_2_0
                def c11, 1.5, 1, 0, 50
                def c12, 5, 0.200000003, 0.159154937, 0.5
                def c13, 6.28318548, -3.14159274, 2.25, 3.5
                def c14, 0.5, -0.5, 0, 0
                def c15, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c16, -0.020833334, -0.125, 1, 0.5
                dcl t0.xy
                dcl_2d s0
                mov r0.xy, c7
                mad r0.xy, c6, t0, r0
                add r0.xy, r0, -c8
                mul r1.xy, r0, c11
                dp2add r0.z, r1, r1, c11.z
                rsq r0.z, r0.z
                rcp r0.w, r0.z
                mul r0.xy, r0, r0.z
                add r0.z, r0.w, -c0.x
                rcp r0.z, -r0.z
                mul r0.z, r0.z, c11.w
                abs r0.z, r0.z
                min r1.x, r0.z, c12.x
                mul r0.z, r1.x, c10.x
                mul r1.x, r0.w, c12.y
                mov r2.w, c1.x
                mad r1.x, r1.x, r2.w, c2.x
                mad r1.x, r1.x, c12.z, c12.w
                frc r1.x, r1.x
                mad r1.x, r1.x, c13.x, c13.y
                sincos r2.y, r1.x, c15, c16
                mad r0.z, r2.y, r0.z, r0.w
                mad r0.xy, r0, r0.z, c8
                add r0.xy, r0, -c7
                mad r0.zw, r0.wzyx, c3.wzyx, -t0.wzyx
                mul r0.xy, r0, c3
                mad r1.xy, r0.wzyx, c13.w, t0
                mad r2.xy, r0.wzyx, c13.z, t0
                texld r0, r0, s0
                texld r2, r2, s0
                texld r1, r1, s0
                max r0.x, r1.y, r1.z
                max r2.x, r1.x, r0.x
                min r0.x, r1.z, r1.y
                min r2.z, r0.x, r1.x
                add r0.x, r2.x, r2.z
                add r0.y, r0.x, -c11.y
                mov r3.xyz, c5
                mad r3.xyz, r0.y, c4, r3
                mad r3.w, r0.x, c14.x, c14.y
                mul r4.xyz, r0.x, c5
                cmp r3.xyz, r3.w, r3, r4
                mad r3.xyz, r3, r1.w, -r1
                mad r3.xyz, c9.x, r3, r1
                add r0.x, r0.z, -r1.z
                add r3.z, r3.z, r0.x
                add r0.x, r2.y, -r1.y
                mov r3.w, r1.w
                add r3.y, r3.y, r0.x
                mov oC0, r3
            
            // approximately 58 instruction slots used (3 texture, 55 arithmetic)
            };
    }
    pass MonoFix
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uOpacity;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //   float3 uSecondaryColor;
            //   float2 uTargetPosition;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uColor            c0       1
            //   uSecondaryColor   c1       1
            //   uScreenResolution c2       1
            //   uScreenPosition   c3       1
            //   uTargetPosition   c4       1
            //   uOpacity          c5       1
            //   uTime             c6       1
            //
            
                preshader
                mul r0.xyz, c0.xyz, c1.xyz
                mul r1.xy, r0.xy, c2.xy
                mul r0.xy, r1.xy, c3.xy
                mul c0.xy, r0.xy, c4.xy
                mov r0.x, c5.x
                mul r1.x, r0.x, c5.x
                mul r2.x, r0.z, r1.x
                mul c0.z, r2.x, c5.x
                mov c0.w, c6.x
            
            // approximately 9 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
                ps_2_0
                mov oC0, c0
            
            // approximately 1 instruction slot used
            };
    }
    pass FilterBloodMoon
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //
            
                preshader
                neg r0.xyz, c0.xyz
                add c3.xyz, (1, 1, 1), r0.xyz
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uIntensity;
            //   float uOpacity;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uOpacity     c1       1
            //   uIntensity   c2       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c4, -0.5, -0.300000012, 2, 1
                def c5, 0.5, 1.5, 0.166666672, 1
                def c6, 0.699999988, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r1.xy, t0, c4.x
                mul r1.y, r1.y, r1.y
                mad r1.x, r1.x, r1.x, r1.y
                rsq r1.x, r1.x
                rcp r1.x, r1.x
                add r1.x, r1.x, c4.y
                mad r1.y, r1.x, -c4.z, c4.w
                cmp r1.x, r1.x, r1.y, c4.w
                max r1.y, r0.y, r0.z
                max r2.w, r0.x, r1.y
                min r1.y, r0.z, r0.y
                min r2.x, r1.y, r0.x
                add r1.y, r2.w, r2.x
                add r1.z, r2.w, -r2.x
                add r1.z, r1.z, c5.z
                mad r1.w, r1.y, -c5.x, c5.y
                mov r2.w, c4.w
                mad r2.xyz, r1.w, -c3, r2.w
                mad r1.w, r1.y, c4.x, -c4.x
                mul r3.xyz, r1.y, c0
                cmp r2.xyz, r1.w, r3, r2
                mad r2.xyz, r1.y, c4.x, r2
                mul r1.w, r1.y, -c4.x
                mad r2.w, r1.y, -c5.x, c5.w
                mul r2.w, r2.w, c2.x
                mul r2.w, r2.w, c6.x
                mad r3.xyz, r1.z, r2, r1.w
                mov r3.w, c4.w
                mul r4, r0.w, r3
                mul r4, r4, r4
                mad r3, r3, r0.w, -r4
                mad r3, r3, -c4.y, r4
                lrp r4, r2.w, r3, r0
                mad r1, r1.x, r4, -r0
                mad r0, c1.x, r1, r0
                mov oC0, r0
            
            // approximately 37 instruction slots used (1 texture, 36 arithmetic)
            };
    }
    pass FilterMiniTower
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //
            
                preshader
                neg r0.xyz, c0.xyz
                add c2.xyz, (1, 1, 1), r0.xyz
            
            // approximately 2 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   float uOpacity;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uOpacity     c1       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, 0.5, -0.5, -1, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r1.x, r2.w, r2.x
                add r1.y, r1.x, c3.z
                mov r2.xyz, c0
                mad r1.yzw, r1.y, c2.wzyx, r2.wzyx
                mad r2.x, r1.x, c3.x, c3.y
                mul r2.yzw, r1.x, c0.wzyx
                cmp r1.xyz, r2.x, r1.wzyx, r2.wzyx
                mad r1.xyz, r1, r0.w, -r0
                mad r0.xyz, c1.x, r1, r0
                mov oC0, r0
            
            // approximately 15 instruction slots used (1 texture, 14 arithmetic)
            };
    }
    pass FilterMoonLordShake
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uIntensity;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //   uIntensity   c1       1
            //
            
                preshader
                mul r0.x, c0.x, (3.18309886)
                add r1.x, r0.x, (0.5)
                frc r0.x, r1.x
                mul r1.x, r0.x, (6.28318531)
                add r0.x, r1.x, (-3.14159265)
                sin r1.y, r0.x
                mul r0.x, r1.y, c1.x
                mul c1.x, r0.x, (0.01)
            
            // approximately 8 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float uIntensity;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uIntensity   c0       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c2, -0.5, 0, 1, 0.150000006
                def c3, 0.699999988, 1.29999995, 1, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c2.x
                dp2add r0.x, r0, r0, c2.y
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mov r0.z, c2.z
                mad r0.y, c0.x, -r0.x, r0.z
                mul r0.x, r0.x, c0.x
                mad r0.x, r0.x, -c3.y, c3.z
                mul r1.x, r0.y, c1.x
                mov r1.y, c2.y
                add r2.xy, r1, t0
                add r1.xy, -r1, t0
                texld r1, r1, s0
                texld r2, r2, s0
                texld r3, t0, s0
                mul r2, r2, c2.w
                mad r2, r3, c3.x, r2
                mad r1, r1, c2.w, r2
                mul r0, r0.x, r1
                mov oC0, r0
            
            // approximately 21 instruction slots used (3 texture, 18 arithmetic)
            };
    }
    pass FilterSandstormForeground
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uDirection;
            //   float2 uImageSize1;
            //   float uIntensity;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uTargetPosition c0       1
            //   uDirection      c1       1
            //   uIntensity      c2       1
            //   uImageSize1     c3       1
            //
            
                preshader
                rcp c0.x, c3.x
                rcp c0.y, c3.y
                mul c1.x, c1.x, (0.01)
                mul c2.xy, (1.2, 1.2), c0.xy
                mul c3.xy, (1.4, 1.4), c0.xy
                neg r0.x, c2.x
                add c4.x, r0.x, (1)
            
            // approximately 7 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float uIntensity;
            //   float uOpacity;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //   float3 uSecondaryColor;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uColor            c5       1
            //   uSecondaryColor   c6       1
            //   uScreenResolution c7       1
            //   uScreenPosition   c8       1
            //   uTargetPosition   c9       1
            //   uOpacity          c10      1
            //   uIntensity        c11      1
            //   uImage0           s0       1
            //   uImage1           s1       1
            //
            
                ps_2_0
                def c12, 0.407436669, 0.25, 6.28318548, -3.14159274
                def c13, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
                def c14, -0.5, 1, 0.300000012, 0.0850000009
                def c15, 2.5, -2, 3, -0.519999981
                def c16, 10, 1.20000005, 0.333333343, 0.400000006
                def c17, 0, 4, 0, 0
                dcl v0.xyz
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mov r0.xy, c7
                mad r0.xy, t0, r0, c8
                mul r0.xy, r0, c0
                mad r1.x, r0.y, c12.x, c12.y
                mad r1.y, r0.x, c12.x, c12.y
                frc r0.zw, r1.wzyx
                mad r0.zw, r0, c12.z, c12.w
                mul r0.zw, r0, r0
                mad r1.xy, r0.wzyx, c13.x, c13.y
                mad r1.xy, r0.wzyx, r1, c13.z
                mad r1.xy, r0.wzyx, r1, c13.w
                mad r1.xy, r0.wzyx, r1, c14.x
                mad r0.zw, r0, r1.wzyx, c14.y
                mad r0.xy, r0.wzyx, c1.x, r0
                add r1.xy, r0, c2
                add r2.xy, r0, c9
                add r0.xy, r0, c3
                texld r1, r1, s1
                texld r0, r0, s1
                texld r2, r2, s1
                texld r3, t0, s0
                mad r0.x, r1.y, c14.z, c14.w
                mul_sat r0.x, r0.x, c15.x
                mad r0.y, r0.x, c15.y, c15.z
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.y, r0.x
                add r0.y, r0.z, c15.w
                mul_sat r0.y, r0.y, c16.x
                mul r1.xyz, r2.x, c6
                mov r4.xyz, c6
                mad r4.xyz, r4, -r2.x, c5
                mov r1.w, r2.x
                add r4.w, -r1.w, c14.y
                mad r1, r0.x, r4, r1
                mad r0.x, r0.y, c15.y, c15.z
                mul r0.y, r0.y, r0.y
                mul r0.x, r0.x, r0.y
                lrp r2, r0.x, c16.y, r1
                add r0.x, r3.y, r3.x
                add r0.x, r3.z, r0.x
                mul r0.x, r0.x, c16.z
                mov r1.x, c11.x
                mad r0.x, r0.x, c4.x, r1.x
                mad r1, r2, r0.x, -r3
                mul r0.x, r2.w, r0.x
                mul r0.x, r0.x, c10.x
                mul r0.x, r0.x, c16.w
                mad r0, r0.x, r1, r3
                add r1.xy, t0, c14.x
                dp2add r1.x, r1, r1, c17.x
                rsq r1.x, r1.x
                rcp r1.x, r1.x
                min r2.x, r1.x, -c14.x
                mul r1.x, r2.x, c10.x
                mul r1.x, r1.x, c11.x
                mul r1.x, r1.x, c17.y
                mul r1.yzw, v0.wzyx, c6.wzyx
                mul r2.xyz, r1.wzyx, c16.w
                mov r2.w, c14.y
                lrp r3, r1.x, r2, r0
                mov oC0, r3
            
            // approximately 62 instruction slots used (4 texture, 58 arithmetic)
            };
    }
    pass FilterSandstormBackground
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uDirection;
            //   float2 uImageSize1;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uTargetPosition c0       1
            //   uDirection      c1       1
            //   uImageSize1     c2       1
            //
            
                preshader
                rcp c0.x, c2.x
                rcp c0.y, c2.y
                mul c1.x, c1.x, (0.01)
                mul c2.xy, (1.2, 1.2), c0.xy
                mul c3.xy, (1.4, 1.4), c0.xy
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage1;
            //   float uOpacity;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //   float3 uSecondaryColor;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uColor            c4       1
            //   uSecondaryColor   c5       1
            //   uScreenResolution c6       1
            //   uScreenPosition   c7       1
            //   uTargetPosition   c8       1
            //   uOpacity          c9       1
            //   uImage1           s1       1
            //
            
                ps_2_0
                def c10, 0.407436669, 0.25, 6.28318548, -3.14159274
                def c11, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
                def c12, -0.5, 1, 0.300000012, 0.0850000009
                def c13, 2.5, -2, 3, -0.519999981
                def c14, 10, 1.39999998, 0.200000003, 0
                def c15, 0.0500000007, 1, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s1
                mov r0.xy, c6
                mad r0.xy, t0, r0, c7
                mul r0.xy, r0, c0
                mad r1.x, r0.y, c10.x, c10.y
                mad r1.y, r0.x, c10.x, c10.y
                frc r0.zw, r1.wzyx
                mad r0.zw, r0, c10.z, c10.w
                mul r0.zw, r0, r0
                mad r1.xy, r0.wzyx, c11.x, c11.y
                mad r1.xy, r0.wzyx, r1, c11.z
                mad r1.xy, r0.wzyx, r1, c11.w
                mad r1.xy, r0.wzyx, r1, c12.x
                mad r0.zw, r0, r1.wzyx, c12.y
                mad r0.xy, r0.wzyx, c1.x, r0
                add r1.xy, r0, c2
                add r2.xy, r0, c8
                add r0.xy, r0, c3
                texld r1, r1, s1
                texld r0, r0, s1
                texld r2, r2, s1
                mad r0.x, r1.y, c12.z, c12.w
                mul_sat r0.x, r0.x, c13.x
                mad r0.y, r0.x, c13.y, c13.z
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.y, r0.x
                add r0.y, r0.z, c13.w
                mul_sat r0.y, r0.y, c14.x
                mul r1.xyz, r2.x, c5
                mov r3.xyz, c5
                mad r3.xyz, r3, -r2.x, c4
                mov r1.w, r2.x
                add r3.w, -r1.w, c12.y
                mad r1, r0.x, r3, r1
                mad r0.x, r0.y, c13.y, c13.z
                mul r0.y, r0.y, r0.y
                mul r0.x, r0.x, r0.y
                lrp r2, r0.x, c14.y, r1
                mul r0, r2, c9.x
                mul r0, r0, c14.z
                lrp r1, c15.x, c15.y, v0
                mul r0, r0, r1
                mov oC0, r0
            
            // approximately 42 instruction slots used (3 texture, 39 arithmetic)
            };
    }
    pass FilterBlizzardForeground
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uDirection;
            //   float2 uImageSize1;
            //   float uIntensity;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uTargetPosition c0       1
            //   uDirection      c1       1
            //   uIntensity      c2       1
            //   uImageSize1     c3       1
            //
            
                preshader
                rcp c0.x, c3.x
                rcp c0.y, c3.y
                mul c1.x, c1.x, (0.06)
                mul c2.xy, (1.2, 1.2), c0.xy
                mul c3.xy, (1.4, 1.4), c0.xy
                neg r0.x, c2.x
                add c4.x, r0.x, (1)
            
            // approximately 7 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float uIntensity;
            //   float uOpacity;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //   float3 uSecondaryColor;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uColor            c5       1
            //   uSecondaryColor   c6       1
            //   uScreenResolution c7       1
            //   uScreenPosition   c8       1
            //   uTargetPosition   c9       1
            //   uOpacity          c10      1
            //   uIntensity        c11      1
            //   uImage0           s0       1
            //   uImage1           s1       1
            //
            
                ps_2_0
                def c12, -0.5, 1, 0.300000012, 0.0850000009
                def c13, 0.814873338, 0.25, 6.28318548, -3.14159274
                def c14, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
                def c15, 2.5, -2, 3, -0.519999981
                def c16, 10, 1.20000005, 0.333333343, 0.600000024
                def c17, 0.400000006, 0, 4, 0
                dcl v0.xyz
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mov r0.xy, c7
                mad r0.xy, t0, r0, c8
                mul r0.xy, r0, c0
                mad r1.x, r0.y, c13.x, c13.y
                mad r1.y, r0.x, c13.x, c13.y
                frc r0.zw, r1.wzyx
                mad r0.zw, r0, c13.z, c13.w
                mul r0.zw, r0, r0
                mad r1.xy, r0.wzyx, c14.x, c14.y
                mad r1.xy, r0.wzyx, r1, c14.z
                mad r1.xy, r0.wzyx, r1, c14.w
                mad r1.xy, r0.wzyx, r1, c12.x
                mad r0.zw, r0, r1.wzyx, c12.y
                mad r0.xy, r0.wzyx, c1.x, r0
                add r1.xy, r0, c2
                add r2.xy, r0, c9
                add r0.xy, r0, c3
                texld r1, r1, s1
                texld r0, r0, s1
                texld r2, r2, s1
                texld r3, t0, s0
                mad r0.x, r1.y, c12.z, c12.w
                mul_sat r0.x, r0.x, c15.x
                mad r0.y, r0.x, c15.y, c15.z
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.y, r0.x
                add r0.y, r0.z, c15.w
                mul_sat r0.y, r0.y, c16.x
                mul r1.xyz, r2.x, c6
                mov r4.xyz, c6
                mad r4.xyz, r4, -r2.x, c5
                mov r1.w, r2.x
                add r4.w, -r1.w, c12.y
                mad r1, r0.x, r4, r1
                mad r0.x, r0.y, c15.y, c15.z
                mul r0.y, r0.y, r0.y
                mul r0.x, r0.x, r0.y
                lrp r2, r0.x, c16.y, r1
                add r0.x, r3.y, r3.x
                add r0.x, r3.z, r0.x
                mul r0.x, r0.x, c16.z
                mov r1.x, c11.x
                mad r0.x, r0.x, c4.x, r1.x
                mad r1, r2, r0.x, -r3
                mul r0.x, r2.w, r0.x
                mul r0.x, r0.x, c10.x
                mul r0.x, r0.x, c16.w
                mad r0, r0.x, r1, r3
                add r1.xy, t0, c12.x
                dp2add r1.x, r1, r1, c17.y
                rsq r1.x, r1.x
                rcp r1.x, r1.x
                min r2.x, r1.x, -c12.x
                mul r1.x, r2.x, c10.x
                mul r1.x, r1.x, c11.x
                mul r1.x, r1.x, c17.z
                mul r1.yzw, v0.wzyx, c6.wzyx
                mul r2.xyz, r1.wzyx, c17.x
                mov r2.w, c12.y
                lrp r3, r1.x, r2, r0
                mov oC0, r3
            
            // approximately 62 instruction slots used (4 texture, 58 arithmetic)
            };
    }
    pass FilterBlizzardBackground
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uDirection;
            //   float2 uImageSize1;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uTargetPosition c0       1
            //   uDirection      c1       1
            //   uImageSize1     c2       1
            //
            
                preshader
                rcp c0.x, c2.x
                rcp c0.y, c2.y
                mul c1.x, c1.x, (0.06)
                mul c2.xy, (1.2, 1.2), c0.xy
                mul c3.xy, (1.4, 1.4), c0.xy
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage1;
            //   float uOpacity;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //   float3 uSecondaryColor;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uColor            c4       1
            //   uSecondaryColor   c5       1
            //   uScreenResolution c6       1
            //   uScreenPosition   c7       1
            //   uTargetPosition   c8       1
            //   uOpacity          c9       1
            //   uImage1           s1       1
            //
            
                ps_2_0
                def c10, -0.5, 1, 0.300000012, 0.0850000009
                def c11, 0.814873338, 0.25, 6.28318548, -3.14159274
                def c12, -2.52398507e-007, 2.47609005e-005, -0.00138883968, 0.0416666418
                def c13, 2.5, -2, 3, -0.519999981
                def c14, 10, 1.20000005, 0.600000024, 0
                def c15, 0.0500000007, 1, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s1
                mov r0.xy, c6
                mad r0.xy, t0, r0, c7
                mul r0.xy, r0, c0
                mad r1.x, r0.y, c11.x, c11.y
                mad r1.y, r0.x, c11.x, c11.y
                frc r0.zw, r1.wzyx
                mad r0.zw, r0, c11.z, c11.w
                mul r0.zw, r0, r0
                mad r1.xy, r0.wzyx, c12.x, c12.y
                mad r1.xy, r0.wzyx, r1, c12.z
                mad r1.xy, r0.wzyx, r1, c12.w
                mad r1.xy, r0.wzyx, r1, c10.x
                mad r0.zw, r0, r1.wzyx, c10.y
                mad r0.xy, r0.wzyx, c1.x, r0
                add r1.xy, r0, c2
                add r2.xy, r0, c8
                add r0.xy, r0, c3
                texld r1, r1, s1
                texld r0, r0, s1
                texld r2, r2, s1
                mad r0.x, r1.y, c10.z, c10.w
                mul_sat r0.x, r0.x, c13.x
                mad r0.y, r0.x, c13.y, c13.z
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.y, r0.x
                add r0.y, r0.z, c13.w
                mul_sat r0.y, r0.y, c14.x
                mul r1.xyz, r2.x, c5
                mov r3.xyz, c5
                mad r3.xyz, r3, -r2.x, c4
                mov r1.w, r2.x
                add r3.w, -r1.w, c10.y
                mad r1, r0.x, r3, r1
                mad r0.x, r0.y, c13.y, c13.z
                mul r0.y, r0.y, r0.y
                mul r0.x, r0.x, r0.y
                lrp r2, r0.x, c14.y, r1
                mul r0, r2, c9.x
                mul r0, r0, c14.z
                lrp r1, c15.x, c15.y, v0
                mul r0, r0, r1
                mov oC0, r0
            
            // approximately 42 instruction slots used (3 texture, 39 arithmetic)
            };
    }
    pass FilterHeatDistortion
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize1;
            //   float uIntensity;
            //   float uOpacity;
            //   float2 uScreenResolution;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c0       1
            //   uOpacity          c1       1
            //   uTime             c2       1
            //   uIntensity        c3       1
            //   uImageSize1       c4       1
            //
            
                preshader
                rcp c0.x, c4.x
                rcp c0.y, c4.y
                mul c1.x, c2.x, (0.04)
                mul c2.x, c2.x, (-0.04)
                mul r0.x, c1.x, c3.x
                rcp r1.x, c0.x
                rcp r1.y, c0.y
                mul c3.xy, r0.x, r1.xy
            
            // approximately 8 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c4       1
            //   uScreenPosition   c5       1
            //   uImage0           s0       1
            //   uImage1           s1       1
            //
            
                ps_2_0
                def c6, 0.5, -0.5, 0, 0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mov r0.xy, c4
                mad r0.xy, t0, r0, c5
                mul r0.xy, r0, c0
                mov r1.w, c6.x
                mad r1.y, r0.y, r1.w, c1.x
                mul r1.x, r0.x, c6.x
                mad r0.y, r0.y, r1.w, c2.x
                mov r0.x, r1.x
                texld r0, r0, s1
                texld r1, r1, s1
                add r0.xy, -r0, r1
                add r0.xy, r0, c6.y
                mad r0.xy, r0, c3, t0
                texld r0, r0, s0
                mov oC0, r0
            
            // approximately 15 instruction slots used (3 texture, 12 arithmetic)
            };
    }
    pass FilterWaterDistortion
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize1;
            //   float2 uImageSize3;
            //   float uOpacity;
            //   float uProgress;
            //   float2 uScreenResolution;
            //   float2 uZoom;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c0       1
            //   uOpacity          c1       1
            //   uProgress         c2       1
            //   uImageSize1       c3       1
            //   uImageSize3       c4       1
            //   uZoom             c5       1
            //
            
                preshader
                rcp c0.x, c3.x
                rcp c0.y, c3.y
                mul c1.x, c2.x, (0.04)
                mul c2.x, c2.x, (-0.04)
                rcp c3.x, c5.x
                rcp c3.y, c5.y
                mul r0.x, c1.x, (32)
                rcp r1.x, c0.x
                rcp r1.y, c0.y
                mul c5.xy, r0.x, r1.xy
                rcp c6.x, c4.x
                rcp c6.y, c4.y
            
            // approximately 12 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   sampler2D uImage2;
            //   sampler2D uImage3;
            //   float2 uImageOffset;
            //   float uIntensity;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c7       1
            //   uScreenPosition   c8       1
            //   uTargetPosition   c9       1
            //   uIntensity        c10      1
            //   uImageOffset      c11      1
            //   uImage0           s0       1
            //   uImage1           s1       1
            //   uImage2           s2       1
            //   uImage3           s3       1
            //
            
                ps_2_0
                def c12, 0.100000001, -0.5, 0.200000003, -0.300000012
                def c13, 0.400000006, 1, 1, 0.100000001
                def c14, 100, 0.00100000005, 500, 2
                def c15, -2, 3, 0, 0.333333343
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
                dcl_2d s3
                mov r0.xy, c7
                mad r0.zw, t0.wzyx, r0.wzyx, c8.wzyx
                mul r0.zw, r0, c0.wzyx
                mul r1.x, r0.w, c12.x
                mov r2.xz, c12
                mad r1.y, r0.z, r2.x, c1.x
                mul r2.x, r0.w, c12.z
                mad r2.y, r0.z, r2.z, c2.x
                mov r3.xy, c3
                mad r3.xy, t0, r3, c11
                texld r1, r1, s1
                texld r2, r2, s1
                texld r3, r3, s2
                add r0.zw, r1.wzyx, c12.y
                add r1.xy, r2, c12.y
                add r0.zw, r0, -r1.wzyx
                mul r1.xy, r0.wzyx, c12.x
                add r0.z, r3.x, c12.y
                mad r0.w, r3.z, -c13.x, c13.y
                mul r0.z, r0.z, r0.w
                max r1.z, -r0.z, c12.w
                min r0.w, r1.z, -c12.w
                mad r2.y, r1.y, c10.x, r0.w
                mul r2.x, r1.x, c10.x
                dp2add r0.w, r1, r1, c15.z
                rsq r0.w, r0.w
                rcp r0.w, r0.w
                mad r0.z, r0.z, -c12.w, r0.w
                mul r1.xy, r2, c13.wzyx
                mov r0.w, c14.y
                mad r0.w, r1.y, c5.y, r0.w
                mad r1.xy, r1, c5, t0
                mul_sat r0.w, r0.w, c14.z
                mad r1.z, r0.w, c15.x, c15.y
                mul r0.w, r0.w, r0.w
                mul r0.w, r1.z, r0.w
                mad r1.zw, r1.wzyx, r0.wzyx, c9.wzyx
                mul r2.xy, r1.wzyx, c6
                mad r0.xy, t0, r0, c9
                mul r0.xy, r0, c6
                texld r1, r1, s0
                texld r2, r2, s3
                texld r3, r0, s3
                texld r4, t0, s0
                mul r0.x, r2.w, c14.x
                min r2.x, r0.x, c13.y
                mul r0.x, r3.w, c14.x
                min r2.y, r0.x, c13.y
                add r0.x, r2.x, -r2.y
                add r0.y, r2.x, r2.y
                mul r0.y, r0.y, c14.x
                min r2.y, r0.y, c13.y
                mad r0.y, r0.w, c14.w, r0.x
                abs r0.x, r0.x
                add r0.y, r0.y, -c13.y
                abs r0.y, r0.y
                add r0.y, -r0.y, c13.y
                mul_sat r0.x, r0.x, r0.y
                add r0.x, -r0.x, c13.y
                mul r0.y, r2.y, r0.x
                lrp r3, r0.y, r1, r4
                add r0.y, r3.y, r3.x
                add r0.y, r3.z, r0.y
                mul r0.y, r0.z, r0.y
                mul r0.y, r2.x, r0.y
                mul r0.x, r0.x, r0.y
                mad r3.xyz, r0.x, c15.w, r3
                mov oC0, r3
            
            // approximately 69 instruction slots used (7 texture, 62 arithmetic)
            };
    }
    pass WaterDebugDraw
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c0, -0.5, 0.400000006, 1, 0
                def c1, 2, -2, 0, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r0.x, r0.x, c0.x
                mad r0.y, r0.z, -c0.y, c0.z
                mul r0.x, r0.x, r0.y
                mul r0.x, r0.x, v0.w
                mul r0.xyz, r0.x, c1
                abs r0.w, r0.x
                mov oC0, r0
            
            // approximately 8 instruction slots used (1 texture, 7 arithmetic)
            };
    }
    pass FilterCrystalDestructionColor
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   float uIntensity;
            //   float uOpacity;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c0       1
            //   uOpacity     c1       1
            //   uIntensity   c2       1
            //
            
                preshader
                neg r0.xyz, c0.xyz
                add c0.xyz, (1, 1, 1), r0.xyz
                mul c1.x, c1.x, c2.x
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float3 uColor;
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uColor       c2       1
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c3, 0.333333343, -2, 3, 1
                def c4, 0, 0, 0, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                add r0.w, r0.y, r0.x
                add r0.w, r0.z, r0.w
                mul_sat r0.w, r0.w, c3.x
                mad r1.w, r0.w, c3.y, c3.z
                mul r0.w, r0.w, r0.w
                mul r0.w, r1.w, r0.w
                mul r0.w, r0.w, r0.w
                mad r1.x, r0.w, -c3.y, -c3.w
                add r0.w, r0.w, r0.w
                mov_sat r0.w, r0.w
                mul r1.yzw, r1.x, c0.wzyx
                cmp r1.xyz, r1.x, r1.wzyx, c4.x
                mad r1.xyz, r0.w, c2, r1
                lrp r2.xyz, c1.x, r1, r0
                mov r2.w, c3.w
                mov oC0, r2
            
            // approximately 17 instruction slots used (1 texture, 16 arithmetic)
            };
    }
    pass FilterCrystalDestructionVortex
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uImageSize1;
            //   float2 uScreenPosition;
            //   float2 uTargetPosition;
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uScreenPosition c0       1
            //   uTargetPosition c1       1
            //   uTime           c2       1
            //   uImageSize1     c3       1
            //
            
                preshader
                neg r0.xy, c0.xy
                add c0.xy, r0.xy, c1.xy
                rcp c1.x, c3.y
                mul c2.x, c2.x, (-2.5)
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //   float uIntensity;
            //   float uProgress;
            //   float2 uScreenResolution;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c3       1
            //   uIntensity        c4       1
            //   uProgress         c5       1
            //   uImage0           s0       1
            //   uImage1           s1       1
            //
            
                ps_2_0
                def c6, 0, 0.0208350997, -0.0851330012, 0.180141002
                def c7, -0.330299497, 0.999866009, 0, 1
                def c8, -2, 1.57079637, -0, -3.14159274
                def c9, 0.318319261, 0.0199999996, 3.14159203, 0.100000001
                def c10, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c11, -0.020833334, -0.125, 1, 0.5
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                mov r0.xy, c3
                mad r0.xy, t0, r0, -c0
                abs r0.z, r0.y
                abs r0.w, r0.x
                max r1.w, r0.z, r0.w
                rcp r1.x, r1.w
                min r1.y, r0.w, r0.z
                add r0.z, -r0.z, r0.w
                cmp r0.z, r0.z, c7.z, c7.w
                mul r0.w, r1.x, r1.y
                mul r1.x, r0.w, r0.w
                mad r1.y, r1.x, c6.y, c6.z
                mad r1.y, r1.x, r1.y, c6.w
                mad r1.y, r1.x, r1.y, c7.x
                mad r1.x, r1.x, r1.y, c7.y
                mul r0.w, r0.w, r1.x
                mad r1.x, r0.w, c8.x, c8.y
                mad r0.z, r1.x, r0.z, r0.w
                cmp r0.w, r0.x, c8.z, c8.w
                add r0.z, r0.z, r0.w
                add r0.w, r0.z, r0.z
                max r1.x, r0.y, r0.x
                cmp r1.x, r1.x, c7.w, c7.z
                min r1.y, r0.x, r0.y
                dp2add r0.x, r0, r0, c6.x
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                cmp r0.y, r1.y, c6.x, r1.x
                mad r0.y, r0.y, -r0.w, r0.z
                mad r1.x, r0.x, c1.x, r0.y
                mul r0.y, r0.x, c1.x
                mov r2.w, c1.x
                mad r0.x, r0.x, r2.w, -c5.x
                max r1.z, r0.x, c6.x
                min r0.x, r1.z, c9.z
                sincos r2.y, r0.x, c10, c11
                mul r0.x, r2.y, c9.w
                add r1.y, r0.y, c2.x
                mul r1.xy, r1, c9
                texld r1, r1, s1
                texld r2, t0, s0
                mul r0.yz, r1.zxyw, r1.zxyw
                mul r0.yz, r1.zxyw, r0
                mul r0.xy, r0.x, r0.yzxw
                mad r1.xyz, r0.x, -c4.x, r2
                mad r2.xyz, r0.y, c4.x, r1
                mov oC0, r2
            
            // approximately 55 instruction slots used (2 texture, 53 arithmetic)
            };
    }
    pass FilterCrystalWin
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uOpacity;
            //   float uProgress;
            //   float2 uScreenPosition;
            //   float2 uTargetPosition;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   uScreenPosition c0       1
            //   uTargetPosition c1       1
            //   uOpacity        c2       1
            //   uProgress       c3       1
            //
            
                preshader
                neg r0.xy, c0.xy
                add c0.xy, r0.xy, c1.xy
                mul c1.x, c2.x, c3.x
            
            // approximately 3 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float uProgress;
            //   float2 uScreenResolution;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c2       1
            //   uProgress         c3       1
            //   uImage0           s0       1
            //
            
                ps_2_0
                def c4, 1, 0, 0, 0
                def c5, 0, 0.0078125, 0.5, 2
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                mov r1.xy, c2
                mad r1.xy, t0, r1, -c0
                dp2add r1.x, r1, r1, c5.x
                rsq r1.x, r1.x
                rcp r1.x, r1.x
                mov r1.y, c5.y
                mad r1.x, r1.x, r1.y, c3.x
                add r1.y, -r1.x, c5.z
                rcp r1.x, r1.x
                cmp r1.x, r1.y, c5.w, r1.x
                mul r1.x, r1.x, c3.x
                mul r1.y, r1.x, r1.x
                mad r1.x, r1.x, r1.x, c4.x
                mad r1, r0, r1.x, r1.y
                lrp r2, c1.x, r1, r0
                mov oC0, r2
            
            // approximately 18 instruction slots used (1 texture, 17 arithmetic)
            };
    }
    pass FilterTest
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c0, -0.5, 0.200000003, 0.5, 0
                dcl t0.xy
                dcl_2d s0
                add r0.xy, t0, c0.x
                mad r0.xy, r0, c0.y, c0.z
                texld r0, r0, s0
                mov oC0, r0
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
    pass FilterTest2
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //
            
                ps_2_0
                def c0, 0.550000012, -0.100000001, 0, -0.25
                def c1, 0.0588235296, 0.219607845, 0.0588235296, 0
                def c2, 0.188235298, 0.384313732, 0.188235298, 0
                def c3, 0.545098066, 0.674509823, 0.0588235296, 0
                def c4, 0.607843161, 0.737254918, 0.0588235296, 0
                def c5, -0.5, -0.75, 1, 0
                dcl t0.xy
                dcl_2d s0
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r0.x, r2.w, r2.x
                mad r0.x, r0.x, c0.x, c0.y
                max r1.x, r0.x, c0.z
                add r0.x, r1.x, c5.y
                mov r2.xyz, c4
                cmp r0.xyz, r0.x, r2, c3
                add r0.w, r1.x, c5.x
                add r1.x, r1.x, c0.w
                cmp r0.xyz, r0.w, r0, c2
                cmp r0.xyz, r1.x, r0, c1
                mov r0.w, c5.z
                mov oC0, r0
            
            // approximately 17 instruction slots used (1 texture, 16 arithmetic)
            };
    }
    pass FilterTest3
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float uTime;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uTime        c0       1
            //
            
                preshader
                mul c0.x, c0.x, (0.5)
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   sampler2D uImage1;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   uImage0      s0       1
            //   uImage1      s1       1
            //
            
                ps_2_0
                def c1, 0.5, 0.800000012, 0.200000003, 0
                dcl v0
                dcl t0.xy
                dcl_2d s0
                dcl_2d s1
                texld r0, t0, s0
                max r1.w, r0.y, r0.z
                max r2.w, r0.x, r1.w
                min r1.x, r0.z, r0.y
                min r2.x, r1.x, r0.x
                add r1.x, r2.w, r2.x
                mov r2.x, c1.x
                mad r1.x, r1.x, r2.x, c0.x
                abs r1.y, r1.x
                frc r1.y, r1.y
                cmp r1.x, r1.x, r1.y, -r1.y
                mov r1.y, c1.x
                texld r1, r1, s1
                mul r1, r1, c1.y
                mad r1, r0, c1.z, r1
                mul r1, r1, v0
                mul r0, r0.w, r1
                mov oC0, r0
            
            // approximately 18 instruction slots used (2 texture, 16 arithmetic)
            };
    }
    pass FilterCRT
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   float2 uScreenResolution;
            //   float2 uZoom;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c0       1
            //   uZoom             c1       1
            //
            
                preshader
                mul c2.x, c0.y, c1.x
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.26.952.2844
            //
            // Parameters:
            //
            //   sampler2D uImage0;
            //   float2 uScreenPosition;
            //   float2 uScreenResolution;
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   uScreenResolution c0       1
            //   uScreenPosition   c1       1
            //   uImage0           s0       1
            //
            
                ps_2_0
                def c3, 2, -1, 0.142857149, 0.5
                def c4, 40, -2, 3, 0
                def c5, 0.159999996, 1, 0.129999995, 0
                def c6, 0.222816914, 0.5, 6.28318548, -3.14159274
                def c7, 1, 0, 0.5, -0.5
                def c8, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c9, -0.020833334, -0.125, 1, 0.5
                dcl t0.xy
                dcl_2d s0
                mad r0.xy, t0, c3.x, c3.y
                mul r1.x, r0.y, c3.z
                mul r1.y, r0.x, c3.z
                mul r0.zw, r1.wzyx, r1.wzyx
                mad r0.xy, r0.wzyx, r0, r0
                mad r0.z, r0.x, c7.z, c7.w
                cmp r0.z, r0.z, c7.x, c7.y
                mad r1.xy, r0, c3.w, c3.w
                mad r0.x, r0.y, c7.z, c7.w
                cmp r0.x, r0.x, c7.x, c7.y
                cmp r0.y, -r1.x, c7.x, c7.y
                add r0.y, r0.z, r0.y
                cmp r0.y, -r0.y, c7.y, c7.x
                cmp r0.z, -r1.y, c7.x, c7.y
                add r0.y, r0.y, r0.z
                cmp r0.y, -r0.y, c7.y, c7.x
                add r0.x, r0.x, r0.y
                texld r2, r1, s0
                mad r0.yz, r1.zxyw, c3.x, c3.y
                abs r0.yz, r0
                add r0.yz, -r0, -c3.y
                cmp r1, -r0.x, r2, c7.y
                mul r0.x, t0.y, c2.x
                mad r0.x, r0.x, c6.x, c6.y
                frc r0.x, r0.x
                mad r0.x, r0.x, c6.z, c6.w
                sincos r2.xy, r0.x, c8, c9
                add r0.x, r2.y, -c3.y
                add r0.w, r2.x, -c3.y
                mad r0.w, r0.w, c5.z, c5.y
                mul_sat r1.xz, r1, r0.w
                mad r0.x, r0.x, c5.x, c5.y
                mul_sat r1.y, r1.y, r0.x
                mov_sat r1.w, r1.w
                mov r2.xy, c0
                mad r2.xy, t0, r2, c1
                rcp r3.x, r2.x
                rcp r3.y, r2.y
                mul r2.xy, r3, c4.x
                rcp r3.x, r2.x
                rcp r3.y, r2.y
                mul_sat r0.xy, r0.yzxw, r3
                mad r0.zw, r0.wzyx, c4.y, c4.z
                mul r0.xy, r0, r0
                mul_sat r0.xy, r0.wzyx, r0
                mul r1, r1, r0.x
                mul r0, r0.y, r1
                mov oC0, r0
            
            // approximately 55 instruction slots used (1 texture, 54 arithmetic)
            };
    }
}

